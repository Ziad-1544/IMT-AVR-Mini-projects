
Calculator_CLCD_KPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00002e8e  00002f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c74  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d85  00000000  00000000  00004ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  00005a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000250  00000000  00000000  00005c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b10  00000000  00000000  00005e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001782  00000000  00000000  0000898d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b1  00000000  00000000  0000a10f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  0000b5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000317  00000000  00000000  0000b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  0000baf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c589  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 04 11 	call	0x2208	; 0x2208 <main>
      7a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 4d 04 	call	0x89a	; 0x89a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e7       	ldi	r26, 0x72	; 114
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e7       	ldi	r24, 0x72	; 114
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	62 e7       	ldi	r22, 0x72	; 114
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

000007da <__nesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__nesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__nesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__nesf2+0x58>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

0000083a <__gtsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

0000089a <__gesf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__gesf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__gesf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__gesf2+0x58>
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

000008fa <__ltsf2>:
     8fa:	a8 e1       	ldi	r26, 0x18	; 24
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	2d 83       	std	Y+5, r18	; 0x05
     910:	3e 83       	std	Y+6, r19	; 0x06
     912:	4f 83       	std	Y+7, r20	; 0x07
     914:	58 87       	std	Y+8, r21	; 0x08
     916:	89 e0       	ldi	r24, 0x09	; 9
     918:	e8 2e       	mov	r14, r24
     91a:	f1 2c       	mov	r15, r1
     91c:	ec 0e       	add	r14, r28
     91e:	fd 1e       	adc	r15, r29
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	b7 01       	movw	r22, r14
     926:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     92a:	8e 01       	movw	r16, r28
     92c:	0f 5e       	subi	r16, 0xEF	; 239
     92e:	1f 4f       	sbci	r17, 0xFF	; 255
     930:	ce 01       	movw	r24, r28
     932:	05 96       	adiw	r24, 0x05	; 5
     934:	b8 01       	movw	r22, r16
     936:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     93a:	89 85       	ldd	r24, Y+9	; 0x09
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	40 f0       	brcs	.+16     	; 0x950 <__ltsf2+0x56>
     940:	89 89       	ldd	r24, Y+17	; 0x11
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	28 f0       	brcs	.+10     	; 0x950 <__ltsf2+0x56>
     946:	c7 01       	movw	r24, r14
     948:	b8 01       	movw	r22, r16
     94a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__ltsf2+0x58>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	68 96       	adiw	r28, 0x18	; 24
     954:	e6 e0       	ldi	r30, 0x06	; 6
     956:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

0000095a <__floatsisf>:
     95a:	a8 e0       	ldi	r26, 0x08	; 8
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e3 eb       	ldi	r30, 0xB3	; 179
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__+0x12>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	da 01       	movw	r26, r20
     970:	c9 01       	movw	r24, r18
     972:	88 27       	eor	r24, r24
     974:	b7 fd       	sbrc	r27, 7
     976:	83 95       	inc	r24
     978:	99 27       	eor	r25, r25
     97a:	aa 27       	eor	r26, r26
     97c:	bb 27       	eor	r27, r27
     97e:	b8 2e       	mov	r11, r24
     980:	21 15       	cp	r18, r1
     982:	31 05       	cpc	r19, r1
     984:	41 05       	cpc	r20, r1
     986:	51 05       	cpc	r21, r1
     988:	19 f4       	brne	.+6      	; 0x990 <__floatsisf+0x36>
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	3a c0       	rjmp	.+116    	; 0xa04 <__floatsisf+0xaa>
     990:	88 23       	and	r24, r24
     992:	a9 f0       	breq	.+42     	; 0x9be <__floatsisf+0x64>
     994:	20 30       	cpi	r18, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	38 07       	cpc	r19, r24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	48 07       	cpc	r20, r24
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	58 07       	cpc	r21, r24
     9a2:	29 f4       	brne	.+10     	; 0x9ae <__floatsisf+0x54>
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	9f ec       	ldi	r25, 0xCF	; 207
     9ac:	30 c0       	rjmp	.+96     	; 0xa0e <__floatsisf+0xb4>
     9ae:	ee 24       	eor	r14, r14
     9b0:	ff 24       	eor	r15, r15
     9b2:	87 01       	movw	r16, r14
     9b4:	e2 1a       	sub	r14, r18
     9b6:	f3 0a       	sbc	r15, r19
     9b8:	04 0b       	sbc	r16, r20
     9ba:	15 0b       	sbc	r17, r21
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__floatsisf+0x68>
     9be:	79 01       	movw	r14, r18
     9c0:	8a 01       	movw	r16, r20
     9c2:	8e e1       	ldi	r24, 0x1E	; 30
     9c4:	c8 2e       	mov	r12, r24
     9c6:	d1 2c       	mov	r13, r1
     9c8:	dc 82       	std	Y+4, r13	; 0x04
     9ca:	cb 82       	std	Y+3, r12	; 0x03
     9cc:	ed 82       	std	Y+5, r14	; 0x05
     9ce:	fe 82       	std	Y+6, r15	; 0x06
     9d0:	0f 83       	std	Y+7, r16	; 0x07
     9d2:	18 87       	std	Y+8, r17	; 0x08
     9d4:	c8 01       	movw	r24, r16
     9d6:	b7 01       	movw	r22, r14
     9d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	18 16       	cp	r1, r24
     9e0:	19 06       	cpc	r1, r25
     9e2:	84 f4       	brge	.+32     	; 0xa04 <__floatsisf+0xaa>
     9e4:	08 2e       	mov	r0, r24
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__floatsisf+0x96>
     9e8:	ee 0c       	add	r14, r14
     9ea:	ff 1c       	adc	r15, r15
     9ec:	00 1f       	adc	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	0a 94       	dec	r0
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__floatsisf+0x8e>
     9f4:	ed 82       	std	Y+5, r14	; 0x05
     9f6:	fe 82       	std	Y+6, r15	; 0x06
     9f8:	0f 83       	std	Y+7, r16	; 0x07
     9fa:	18 87       	std	Y+8, r17	; 0x08
     9fc:	c8 1a       	sub	r12, r24
     9fe:	d9 0a       	sbc	r13, r25
     a00:	dc 82       	std	Y+4, r13	; 0x04
     a02:	cb 82       	std	Y+3, r12	; 0x03
     a04:	ba 82       	std	Y+2, r11	; 0x02
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     a0e:	28 96       	adiw	r28, 0x08	; 8
     a10:	e9 e0       	ldi	r30, 0x09	; 9
     a12:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x12>

00000a16 <__fixsfsi>:
     a16:	ac e0       	ldi	r26, 0x0C	; 12
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e1 e1       	ldi	r30, 0x11	; 17
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__prologue_saves__+0x20>
     a22:	69 83       	std	Y+1, r22	; 0x01
     a24:	7a 83       	std	Y+2, r23	; 0x02
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	be 01       	movw	r22, r28
     a30:	6b 5f       	subi	r22, 0xFB	; 251
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	61 f1       	breq	.+88     	; 0xa96 <__fixsfsi+0x80>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	50 f1       	brcs	.+84     	; 0xa96 <__fixsfsi+0x80>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	21 f4       	brne	.+8      	; 0xa4e <__fixsfsi+0x38>
     a46:	8e 81       	ldd	r24, Y+6	; 0x06
     a48:	88 23       	and	r24, r24
     a4a:	51 f1       	breq	.+84     	; 0xaa0 <__fixsfsi+0x8a>
     a4c:	2e c0       	rjmp	.+92     	; 0xaaa <__fixsfsi+0x94>
     a4e:	2f 81       	ldd	r18, Y+7	; 0x07
     a50:	38 85       	ldd	r19, Y+8	; 0x08
     a52:	37 fd       	sbrc	r19, 7
     a54:	20 c0       	rjmp	.+64     	; 0xa96 <__fixsfsi+0x80>
     a56:	6e 81       	ldd	r22, Y+6	; 0x06
     a58:	2f 31       	cpi	r18, 0x1F	; 31
     a5a:	31 05       	cpc	r19, r1
     a5c:	1c f0       	brlt	.+6      	; 0xa64 <__fixsfsi+0x4e>
     a5e:	66 23       	and	r22, r22
     a60:	f9 f0       	breq	.+62     	; 0xaa0 <__fixsfsi+0x8a>
     a62:	23 c0       	rjmp	.+70     	; 0xaaa <__fixsfsi+0x94>
     a64:	8e e1       	ldi	r24, 0x1E	; 30
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	82 1b       	sub	r24, r18
     a6a:	93 0b       	sbc	r25, r19
     a6c:	29 85       	ldd	r18, Y+9	; 0x09
     a6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a70:	4b 85       	ldd	r20, Y+11	; 0x0b
     a72:	5c 85       	ldd	r21, Y+12	; 0x0c
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fixsfsi+0x68>
     a76:	56 95       	lsr	r21
     a78:	47 95       	ror	r20
     a7a:	37 95       	ror	r19
     a7c:	27 95       	ror	r18
     a7e:	8a 95       	dec	r24
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__fixsfsi+0x60>
     a82:	66 23       	and	r22, r22
     a84:	b1 f0       	breq	.+44     	; 0xab2 <__fixsfsi+0x9c>
     a86:	50 95       	com	r21
     a88:	40 95       	com	r20
     a8a:	30 95       	com	r19
     a8c:	21 95       	neg	r18
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	4f 4f       	sbci	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <__fixsfsi+0x9c>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__fixsfsi+0x9c>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f ef       	ldi	r20, 0xFF	; 255
     aa6:	5f e7       	ldi	r21, 0x7F	; 127
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__fixsfsi+0x9c>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e8       	ldi	r21, 0x80	; 128
     ab2:	b9 01       	movw	r22, r18
     ab4:	ca 01       	movw	r24, r20
     ab6:	2c 96       	adiw	r28, 0x0c	; 12
     ab8:	e2 e0       	ldi	r30, 0x02	; 2
     aba:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__epilogue_restores__+0x20>

00000abe <__floatunsisf>:
     abe:	a8 e0       	ldi	r26, 0x08	; 8
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	e5 e6       	ldi	r30, 0x65	; 101
     ac4:	f5 e0       	ldi	r31, 0x05	; 5
     ac6:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__prologue_saves__+0x10>
     aca:	7b 01       	movw	r14, r22
     acc:	8c 01       	movw	r16, r24
     ace:	61 15       	cp	r22, r1
     ad0:	71 05       	cpc	r23, r1
     ad2:	81 05       	cpc	r24, r1
     ad4:	91 05       	cpc	r25, r1
     ad6:	19 f4       	brne	.+6      	; 0xade <__floatunsisf+0x20>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	60 c0       	rjmp	.+192    	; 0xb9e <__floatunsisf+0xe0>
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	8e e1       	ldi	r24, 0x1E	; 30
     ae4:	c8 2e       	mov	r12, r24
     ae6:	d1 2c       	mov	r13, r1
     ae8:	dc 82       	std	Y+4, r13	; 0x04
     aea:	cb 82       	std	Y+3, r12	; 0x03
     aec:	ed 82       	std	Y+5, r14	; 0x05
     aee:	fe 82       	std	Y+6, r15	; 0x06
     af0:	0f 83       	std	Y+7, r16	; 0x07
     af2:	18 87       	std	Y+8, r17	; 0x08
     af4:	c8 01       	movw	r24, r16
     af6:	b7 01       	movw	r22, r14
     af8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     afc:	fc 01       	movw	r30, r24
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	f7 ff       	sbrs	r31, 7
     b02:	3b c0       	rjmp	.+118    	; 0xb7a <__floatunsisf+0xbc>
     b04:	22 27       	eor	r18, r18
     b06:	33 27       	eor	r19, r19
     b08:	2e 1b       	sub	r18, r30
     b0a:	3f 0b       	sbc	r19, r31
     b0c:	57 01       	movw	r10, r14
     b0e:	68 01       	movw	r12, r16
     b10:	02 2e       	mov	r0, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__floatunsisf+0x5e>
     b14:	d6 94       	lsr	r13
     b16:	c7 94       	ror	r12
     b18:	b7 94       	ror	r11
     b1a:	a7 94       	ror	r10
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <__floatunsisf+0x56>
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0x7c>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	aa 1f       	adc	r26, r26
     b38:	bb 1f       	adc	r27, r27
     b3a:	2a 95       	dec	r18
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0x74>
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	a1 09       	sbc	r26, r1
     b42:	b1 09       	sbc	r27, r1
     b44:	8e 21       	and	r24, r14
     b46:	9f 21       	and	r25, r15
     b48:	a0 23       	and	r26, r16
     b4a:	b1 23       	and	r27, r17
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	a1 05       	cpc	r26, r1
     b50:	b1 05       	cpc	r27, r1
     b52:	21 f0       	breq	.+8      	; 0xb5c <__floatunsisf+0x9e>
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	4a 29       	or	r20, r10
     b5e:	5b 29       	or	r21, r11
     b60:	6c 29       	or	r22, r12
     b62:	7d 29       	or	r23, r13
     b64:	4d 83       	std	Y+5, r20	; 0x05
     b66:	5e 83       	std	Y+6, r21	; 0x06
     b68:	6f 83       	std	Y+7, r22	; 0x07
     b6a:	78 87       	std	Y+8, r23	; 0x08
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	8e 1b       	sub	r24, r30
     b72:	9f 0b       	sbc	r25, r31
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <__floatunsisf+0xe0>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	81 f0       	breq	.+32     	; 0xb9e <__floatunsisf+0xe0>
     b7e:	0e 2e       	mov	r0, r30
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__floatunsisf+0xcc>
     b82:	ee 0c       	add	r14, r14
     b84:	ff 1c       	adc	r15, r15
     b86:	00 1f       	adc	r16, r16
     b88:	11 1f       	adc	r17, r17
     b8a:	0a 94       	dec	r0
     b8c:	d2 f7       	brpl	.-12     	; 0xb82 <__floatunsisf+0xc4>
     b8e:	ed 82       	std	Y+5, r14	; 0x05
     b90:	fe 82       	std	Y+6, r15	; 0x06
     b92:	0f 83       	std	Y+7, r16	; 0x07
     b94:	18 87       	std	Y+8, r17	; 0x08
     b96:	ce 1a       	sub	r12, r30
     b98:	df 0a       	sbc	r13, r31
     b9a:	dc 82       	std	Y+4, r13	; 0x04
     b9c:	cb 82       	std	Y+3, r12	; 0x03
     b9e:	1a 82       	std	Y+2, r1	; 0x02
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     ba8:	28 96       	adiw	r28, 0x08	; 8
     baa:	ea e0       	ldi	r30, 0x0A	; 10
     bac:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__epilogue_restores__+0x10>

00000bb0 <__clzsi2>:
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	7b 01       	movw	r14, r22
     bba:	8c 01       	movw	r16, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	e8 16       	cp	r14, r24
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	f8 06       	cpc	r15, r24
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	08 07       	cpc	r16, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	18 07       	cpc	r17, r24
     bcc:	88 f4       	brcc	.+34     	; 0xbf0 <__clzsi2+0x40>
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	e8 16       	cp	r14, r24
     bd2:	f1 04       	cpc	r15, r1
     bd4:	01 05       	cpc	r16, r1
     bd6:	11 05       	cpc	r17, r1
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <__clzsi2+0x36>
     bda:	28 f0       	brcs	.+10     	; 0xbe6 <__clzsi2+0x36>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	17 c0       	rjmp	.+46     	; 0xc14 <__clzsi2+0x64>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	12 c0       	rjmp	.+36     	; 0xc14 <__clzsi2+0x64>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	e8 16       	cp	r14, r24
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	f8 06       	cpc	r15, r24
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 07       	cpc	r16, r24
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	18 07       	cpc	r17, r24
     c00:	28 f0       	brcs	.+10     	; 0xc0c <__clzsi2+0x5c>
     c02:	88 e1       	ldi	r24, 0x18	; 24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__clzsi2+0x64>
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	20 e2       	ldi	r18, 0x20	; 32
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	28 1b       	sub	r18, r24
     c1e:	39 0b       	sbc	r19, r25
     c20:	4a 0b       	sbc	r20, r26
     c22:	5b 0b       	sbc	r21, r27
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__clzsi2+0x7e>
     c26:	16 95       	lsr	r17
     c28:	07 95       	ror	r16
     c2a:	f7 94       	ror	r15
     c2c:	e7 94       	ror	r14
     c2e:	8a 95       	dec	r24
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__clzsi2+0x76>
     c32:	f7 01       	movw	r30, r14
     c34:	e6 58       	subi	r30, 0x86	; 134
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 81       	ld	r24, Z
     c3a:	28 1b       	sub	r18, r24
     c3c:	31 09       	sbc	r19, r1
     c3e:	41 09       	sbc	r20, r1
     c40:	51 09       	sbc	r21, r1
     c42:	c9 01       	movw	r24, r18
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <__pack_f>:
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	fc 01       	movw	r30, r24
     c5a:	e4 80       	ldd	r14, Z+4	; 0x04
     c5c:	f5 80       	ldd	r15, Z+5	; 0x05
     c5e:	06 81       	ldd	r16, Z+6	; 0x06
     c60:	17 81       	ldd	r17, Z+7	; 0x07
     c62:	d1 80       	ldd	r13, Z+1	; 0x01
     c64:	80 81       	ld	r24, Z
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	48 f4       	brcc	.+18     	; 0xc7c <__pack_f+0x2e>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a0 e1       	ldi	r26, 0x10	; 16
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e8 2a       	or	r14, r24
     c74:	f9 2a       	or	r15, r25
     c76:	0a 2b       	or	r16, r26
     c78:	1b 2b       	or	r17, r27
     c7a:	a5 c0       	rjmp	.+330    	; 0xdc6 <__pack_f+0x178>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__pack_f+0x34>
     c80:	9f c0       	rjmp	.+318    	; 0xdc0 <__pack_f+0x172>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	21 f4       	brne	.+8      	; 0xc8e <__pack_f+0x40>
     c86:	ee 24       	eor	r14, r14
     c88:	ff 24       	eor	r15, r15
     c8a:	87 01       	movw	r16, r14
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__pack_f+0x4a>
     c8e:	e1 14       	cp	r14, r1
     c90:	f1 04       	cpc	r15, r1
     c92:	01 05       	cpc	r16, r1
     c94:	11 05       	cpc	r17, r1
     c96:	19 f4       	brne	.+6      	; 0xc9e <__pack_f+0x50>
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	96 c0       	rjmp	.+300    	; 0xdca <__pack_f+0x17c>
     c9e:	62 81       	ldd	r22, Z+2	; 0x02
     ca0:	73 81       	ldd	r23, Z+3	; 0x03
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	62 38       	cpi	r22, 0x82	; 130
     ca6:	79 07       	cpc	r23, r25
     ca8:	0c f0       	brlt	.+2      	; 0xcac <__pack_f+0x5e>
     caa:	5b c0       	rjmp	.+182    	; 0xd62 <__pack_f+0x114>
     cac:	22 e8       	ldi	r18, 0x82	; 130
     cae:	3f ef       	ldi	r19, 0xFF	; 255
     cb0:	26 1b       	sub	r18, r22
     cb2:	37 0b       	sbc	r19, r23
     cb4:	2a 31       	cpi	r18, 0x1A	; 26
     cb6:	31 05       	cpc	r19, r1
     cb8:	2c f0       	brlt	.+10     	; 0xcc4 <__pack_f+0x76>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	2a c0       	rjmp	.+84     	; 0xd18 <__pack_f+0xca>
     cc4:	b8 01       	movw	r22, r16
     cc6:	a7 01       	movw	r20, r14
     cc8:	02 2e       	mov	r0, r18
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__pack_f+0x86>
     ccc:	76 95       	lsr	r23
     cce:	67 95       	ror	r22
     cd0:	57 95       	ror	r21
     cd2:	47 95       	ror	r20
     cd4:	0a 94       	dec	r0
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <__pack_f+0x7e>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x9c>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	aa 1f       	adc	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	2a 95       	dec	r18
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <__pack_f+0x94>
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	a1 09       	sbc	r26, r1
     cf2:	b1 09       	sbc	r27, r1
     cf4:	8e 21       	and	r24, r14
     cf6:	9f 21       	and	r25, r15
     cf8:	a0 23       	and	r26, r16
     cfa:	b1 23       	and	r27, r17
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	a1 05       	cpc	r26, r1
     d00:	b1 05       	cpc	r27, r1
     d02:	21 f0       	breq	.+8      	; 0xd0c <__pack_f+0xbe>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	9a 01       	movw	r18, r20
     d0e:	ab 01       	movw	r20, r22
     d10:	28 2b       	or	r18, r24
     d12:	39 2b       	or	r19, r25
     d14:	4a 2b       	or	r20, r26
     d16:	5b 2b       	or	r21, r27
     d18:	da 01       	movw	r26, r20
     d1a:	c9 01       	movw	r24, r18
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	a0 70       	andi	r26, 0x00	; 0
     d22:	b0 70       	andi	r27, 0x00	; 0
     d24:	80 34       	cpi	r24, 0x40	; 64
     d26:	91 05       	cpc	r25, r1
     d28:	a1 05       	cpc	r26, r1
     d2a:	b1 05       	cpc	r27, r1
     d2c:	39 f4       	brne	.+14     	; 0xd3c <__pack_f+0xee>
     d2e:	27 ff       	sbrs	r18, 7
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <__pack_f+0xf6>
     d32:	20 5c       	subi	r18, 0xC0	; 192
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	4f 4f       	sbci	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__pack_f+0xf6>
     d3c:	21 5c       	subi	r18, 0xC1	; 193
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	4f 4f       	sbci	r20, 0xFF	; 255
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	3a 07       	cpc	r19, r26
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	4a 07       	cpc	r20, r26
     d52:	a0 e4       	ldi	r26, 0x40	; 64
     d54:	5a 07       	cpc	r21, r26
     d56:	10 f0       	brcs	.+4      	; 0xd5c <__pack_f+0x10e>
     d58:	e1 e0       	ldi	r30, 0x01	; 1
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	79 01       	movw	r14, r18
     d5e:	8a 01       	movw	r16, r20
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <__pack_f+0x162>
     d62:	60 38       	cpi	r22, 0x80	; 128
     d64:	71 05       	cpc	r23, r1
     d66:	64 f5       	brge	.+88     	; 0xdc0 <__pack_f+0x172>
     d68:	fb 01       	movw	r30, r22
     d6a:	e1 58       	subi	r30, 0x81	; 129
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	d8 01       	movw	r26, r16
     d70:	c7 01       	movw	r24, r14
     d72:	8f 77       	andi	r24, 0x7F	; 127
     d74:	90 70       	andi	r25, 0x00	; 0
     d76:	a0 70       	andi	r26, 0x00	; 0
     d78:	b0 70       	andi	r27, 0x00	; 0
     d7a:	80 34       	cpi	r24, 0x40	; 64
     d7c:	91 05       	cpc	r25, r1
     d7e:	a1 05       	cpc	r26, r1
     d80:	b1 05       	cpc	r27, r1
     d82:	39 f4       	brne	.+14     	; 0xd92 <__pack_f+0x144>
     d84:	e7 fe       	sbrs	r14, 7
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <__pack_f+0x154>
     d88:	80 e4       	ldi	r24, 0x40	; 64
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <__pack_f+0x14c>
     d92:	8f e3       	ldi	r24, 0x3F	; 63
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 0e       	add	r14, r24
     d9c:	f9 1e       	adc	r15, r25
     d9e:	0a 1f       	adc	r16, r26
     da0:	1b 1f       	adc	r17, r27
     da2:	17 ff       	sbrs	r17, 7
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__pack_f+0x162>
     da6:	16 95       	lsr	r17
     da8:	07 95       	ror	r16
     daa:	f7 94       	ror	r15
     dac:	e7 94       	ror	r14
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	16 95       	lsr	r17
     db4:	07 95       	ror	r16
     db6:	f7 94       	ror	r15
     db8:	e7 94       	ror	r14
     dba:	8a 95       	dec	r24
     dbc:	d1 f7       	brne	.-12     	; 0xdb2 <__pack_f+0x164>
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__pack_f+0x17c>
     dc0:	ee 24       	eor	r14, r14
     dc2:	ff 24       	eor	r15, r15
     dc4:	87 01       	movw	r16, r14
     dc6:	ef ef       	ldi	r30, 0xFF	; 255
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	6e 2f       	mov	r22, r30
     dcc:	67 95       	ror	r22
     dce:	66 27       	eor	r22, r22
     dd0:	67 95       	ror	r22
     dd2:	90 2f       	mov	r25, r16
     dd4:	9f 77       	andi	r25, 0x7F	; 127
     dd6:	d7 94       	ror	r13
     dd8:	dd 24       	eor	r13, r13
     dda:	d7 94       	ror	r13
     ddc:	8e 2f       	mov	r24, r30
     dde:	86 95       	lsr	r24
     de0:	49 2f       	mov	r20, r25
     de2:	46 2b       	or	r20, r22
     de4:	58 2f       	mov	r21, r24
     de6:	5d 29       	or	r21, r13
     de8:	b7 01       	movw	r22, r14
     dea:	ca 01       	movw	r24, r20
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	08 95       	ret

00000df8 <__unpack_f>:
     df8:	fc 01       	movw	r30, r24
     dfa:	db 01       	movw	r26, r22
     dfc:	40 81       	ld	r20, Z
     dfe:	51 81       	ldd	r21, Z+1	; 0x01
     e00:	22 81       	ldd	r18, Z+2	; 0x02
     e02:	62 2f       	mov	r22, r18
     e04:	6f 77       	andi	r22, 0x7F	; 127
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	22 1f       	adc	r18, r18
     e0a:	22 27       	eor	r18, r18
     e0c:	22 1f       	adc	r18, r18
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	89 2f       	mov	r24, r25
     e12:	88 0f       	add	r24, r24
     e14:	82 2b       	or	r24, r18
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	99 1f       	adc	r25, r25
     e1c:	99 27       	eor	r25, r25
     e1e:	99 1f       	adc	r25, r25
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	9c 93       	st	X, r25
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	21 15       	cp	r18, r1
     e28:	31 05       	cpc	r19, r1
     e2a:	a9 f5       	brne	.+106    	; 0xe96 <__unpack_f+0x9e>
     e2c:	41 15       	cp	r20, r1
     e2e:	51 05       	cpc	r21, r1
     e30:	61 05       	cpc	r22, r1
     e32:	71 05       	cpc	r23, r1
     e34:	11 f4       	brne	.+4      	; 0xe3a <__unpack_f+0x42>
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	37 c0       	rjmp	.+110    	; 0xea8 <__unpack_f+0xb0>
     e3a:	82 e8       	ldi	r24, 0x82	; 130
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	9c 93       	st	X, r25
     e42:	8e 93       	st	-X, r24
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	9a 01       	movw	r18, r20
     e48:	ab 01       	movw	r20, r22
     e4a:	67 e0       	ldi	r22, 0x07	; 7
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	44 1f       	adc	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	6a 95       	dec	r22
     e56:	d1 f7       	brne	.-12     	; 0xe4c <__unpack_f+0x54>
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	8c 93       	st	X, r24
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__unpack_f+0x80>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	44 1f       	adc	r20, r20
     e64:	55 1f       	adc	r21, r21
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	8d 91       	ld	r24, X+
     e6a:	9c 91       	ld	r25, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	13 96       	adiw	r26, 0x03	; 3
     e72:	9c 93       	st	X, r25
     e74:	8e 93       	st	-X, r24
     e76:	12 97       	sbiw	r26, 0x02	; 2
     e78:	20 30       	cpi	r18, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	38 07       	cpc	r19, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	48 07       	cpc	r20, r24
     e82:	80 e4       	ldi	r24, 0x40	; 64
     e84:	58 07       	cpc	r21, r24
     e86:	58 f3       	brcs	.-42     	; 0xe5e <__unpack_f+0x66>
     e88:	14 96       	adiw	r26, 0x04	; 4
     e8a:	2d 93       	st	X+, r18
     e8c:	3d 93       	st	X+, r19
     e8e:	4d 93       	st	X+, r20
     e90:	5c 93       	st	X, r21
     e92:	17 97       	sbiw	r26, 0x07	; 7
     e94:	08 95       	ret
     e96:	2f 3f       	cpi	r18, 0xFF	; 255
     e98:	31 05       	cpc	r19, r1
     e9a:	79 f4       	brne	.+30     	; 0xeba <__unpack_f+0xc2>
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	19 f4       	brne	.+6      	; 0xeac <__unpack_f+0xb4>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	8c 93       	st	X, r24
     eaa:	08 95       	ret
     eac:	64 ff       	sbrs	r22, 4
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <__unpack_f+0xbe>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8c 93       	st	X, r24
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <__unpack_f+0xe2>
     eb6:	1c 92       	st	X, r1
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <__unpack_f+0xe2>
     eba:	2f 57       	subi	r18, 0x7F	; 127
     ebc:	30 40       	sbci	r19, 0x00	; 0
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	3c 93       	st	X, r19
     ec2:	2e 93       	st	-X, r18
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	8c 93       	st	X, r24
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	44 0f       	add	r20, r20
     ece:	55 1f       	adc	r21, r21
     ed0:	66 1f       	adc	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	8a 95       	dec	r24
     ed6:	d1 f7       	brne	.-12     	; 0xecc <__unpack_f+0xd4>
     ed8:	70 64       	ori	r23, 0x40	; 64
     eda:	14 96       	adiw	r26, 0x04	; 4
     edc:	4d 93       	st	X+, r20
     ede:	5d 93       	st	X+, r21
     ee0:	6d 93       	st	X+, r22
     ee2:	7c 93       	st	X, r23
     ee4:	17 97       	sbiw	r26, 0x07	; 7
     ee6:	08 95       	ret

00000ee8 <__fpcmp_parts_f>:
     ee8:	1f 93       	push	r17
     eea:	dc 01       	movw	r26, r24
     eec:	fb 01       	movw	r30, r22
     eee:	9c 91       	ld	r25, X
     ef0:	92 30       	cpi	r25, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <__fpcmp_parts_f+0xe>
     ef4:	47 c0       	rjmp	.+142    	; 0xf84 <__fpcmp_parts_f+0x9c>
     ef6:	80 81       	ld	r24, Z
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	08 f4       	brcc	.+2      	; 0xefe <__fpcmp_parts_f+0x16>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <__fpcmp_parts_f+0x9c>
     efe:	94 30       	cpi	r25, 0x04	; 4
     f00:	51 f4       	brne	.+20     	; 0xf16 <__fpcmp_parts_f+0x2e>
     f02:	11 96       	adiw	r26, 0x01	; 1
     f04:	1c 91       	ld	r17, X
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	99 f5       	brne	.+102    	; 0xf70 <__fpcmp_parts_f+0x88>
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	68 2f       	mov	r22, r24
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	61 1b       	sub	r22, r17
     f12:	71 09       	sbc	r23, r1
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <__fpcmp_parts_f+0xac>
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	21 f0       	breq	.+8      	; 0xf22 <__fpcmp_parts_f+0x3a>
     f1a:	92 30       	cpi	r25, 0x02	; 2
     f1c:	31 f4       	brne	.+12     	; 0xf2a <__fpcmp_parts_f+0x42>
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	b9 f1       	breq	.+110    	; 0xf90 <__fpcmp_parts_f+0xa8>
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	88 23       	and	r24, r24
     f26:	89 f1       	breq	.+98     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f28:	2d c0       	rjmp	.+90     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	1c 91       	ld	r17, X
     f2e:	11 97       	sbiw	r26, 0x01	; 1
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	f1 f0       	breq	.+60     	; 0xf70 <__fpcmp_parts_f+0x88>
     f34:	81 81       	ldd	r24, Z+1	; 0x01
     f36:	18 17       	cp	r17, r24
     f38:	d9 f4       	brne	.+54     	; 0xf70 <__fpcmp_parts_f+0x88>
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	2d 91       	ld	r18, X+
     f3e:	3c 91       	ld	r19, X
     f40:	13 97       	sbiw	r26, 0x03	; 3
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	94 f0       	brlt	.+36     	; 0xf70 <__fpcmp_parts_f+0x88>
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	bc f0       	brlt	.+46     	; 0xf80 <__fpcmp_parts_f+0x98>
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	8d 91       	ld	r24, X+
     f56:	9d 91       	ld	r25, X+
     f58:	0d 90       	ld	r0, X+
     f5a:	bc 91       	ld	r27, X
     f5c:	a0 2d       	mov	r26, r0
     f5e:	24 81       	ldd	r18, Z+4	; 0x04
     f60:	35 81       	ldd	r19, Z+5	; 0x05
     f62:	46 81       	ldd	r20, Z+6	; 0x06
     f64:	57 81       	ldd	r21, Z+7	; 0x07
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	4a 07       	cpc	r20, r26
     f6c:	5b 07       	cpc	r21, r27
     f6e:	18 f4       	brcc	.+6      	; 0xf76 <__fpcmp_parts_f+0x8e>
     f70:	11 23       	and	r17, r17
     f72:	41 f0       	breq	.+16     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f74:	0a c0       	rjmp	.+20     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f76:	82 17       	cp	r24, r18
     f78:	93 07       	cpc	r25, r19
     f7a:	a4 07       	cpc	r26, r20
     f7c:	b5 07       	cpc	r27, r21
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <__fpcmp_parts_f+0xa8>
     f80:	11 23       	and	r17, r17
     f82:	19 f0       	breq	.+6      	; 0xf8a <__fpcmp_parts_f+0xa2>
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <__fpcmp_parts_f+0xac>
     f8a:	6f ef       	ldi	r22, 0xFF	; 255
     f8c:	7f ef       	ldi	r23, 0xFF	; 255
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <__fpcmp_parts_f+0xac>
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	cb 01       	movw	r24, r22
     f96:	1f 91       	pop	r17
     f98:	08 95       	ret

00000f9a <CLCD_voidSendData>:
#include "CLCD_private.h"
#include "CLCD_config.h"
#include <util/delay.h>


static void CLCD_voidSendData(u8 copy_u8Data){
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	2f 97       	sbiw	r28, 0x0f	; 15
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	8f 87       	std	Y+15, r24	; 0x0f
    //RS    1
    DIO_voidSetPinValue(CTRL_PORT,RS,PIN_HIGH);
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	62 e0       	ldi	r22, 0x02	; 2
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
    //RW    0
    DIO_voidSetPinValue(CTRL_PORT,RW,PIN_LOW);
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
    //SET DATA ->DATA PORT
    DIO_voidSetPortValue(DATA_PORT,copy_u8Data);
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	6f 85       	ldd	r22, Y+15	; 0x0f
     fc8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <DIO_voidSetPortValue>
    //E     PULSE
    DIO_voidSetPinValue(CTRL_PORT,ENA,PIN_HIGH);
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	41 e0       	ldi	r20, 0x01	; 1
     fd2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e8       	ldi	r26, 0x80	; 128
     fdc:	bf e3       	ldi	r27, 0x3F	; 63
     fde:	8b 87       	std	Y+11, r24	; 0x0b
     fe0:	9c 87       	std	Y+12, r25	; 0x0c
     fe2:	ad 87       	std	Y+13, r26	; 0x0d
     fe4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fea:	8d 85       	ldd	r24, Y+13	; 0x0d
     fec:	9e 85       	ldd	r25, Y+14	; 0x0e
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a ef       	ldi	r20, 0xFA	; 250
     ff4:	54 e4       	ldi	r21, 0x44	; 68
     ff6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	8f 83       	std	Y+7, r24	; 0x07
    1000:	98 87       	std	Y+8, r25	; 0x08
    1002:	a9 87       	std	Y+9, r26	; 0x09
    1004:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1006:	6f 81       	ldd	r22, Y+7	; 0x07
    1008:	78 85       	ldd	r23, Y+8	; 0x08
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9e 83       	std	Y+6, r25	; 0x06
    1024:	8d 83       	std	Y+5, r24	; 0x05
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1028:	6f 81       	ldd	r22, Y+7	; 0x07
    102a:	78 85       	ldd	r23, Y+8	; 0x08
    102c:	89 85       	ldd	r24, Y+9	; 0x09
    102e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    103c:	18 16       	cp	r1, r24
    103e:	4c f5       	brge	.+82     	; 0x1092 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	6b 85       	ldd	r22, Y+11	; 0x0b
    1042:	7c 85       	ldd	r23, Y+12	; 0x0c
    1044:	8d 85       	ldd	r24, Y+13	; 0x0d
    1046:	9e 85       	ldd	r25, Y+14	; 0x0e
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <CLCD_voidSendData+0xee>
    106a:	88 ec       	ldi	r24, 0xC8	; 200
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <CLCD_voidSendData+0xdc>
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f7       	brne	.-38     	; 0x106a <CLCD_voidSendData+0xd0>
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <CLCD_voidSendData+0x118>
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    DIO_voidSetPinValue(CTRL_PORT,ENA,PIN_LOW);
    10ba:	84 e0       	ldi	r24, 0x04	; 4
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
}
    10c4:	2f 96       	adiw	r28, 0x0f	; 15
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <CLCD_voidSendCommand>:
static void CLCD_voidSendCommand(u8 copy_u8Command){
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	2f 97       	sbiw	r28, 0x0f	; 15
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	8f 87       	std	Y+15, r24	; 0x0f
    //RS    0
    DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
    10ec:	84 e0       	ldi	r24, 0x04	; 4
    10ee:	62 e0       	ldi	r22, 0x02	; 2
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
    //RW    0
    DIO_voidSetPinValue(CTRL_PORT,RW,PIN_LOW);
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
    //SET DATA ->DATA PORT
    DIO_voidSetPortValue(DATA_PORT,copy_u8Command);
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	6f 85       	ldd	r22, Y+15	; 0x0f
    1104:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <DIO_voidSetPortValue>
    //E     PULSE
    DIO_voidSetPinValue(CTRL_PORT,ENA,PIN_HIGH);
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	41 e0       	ldi	r20, 0x01	; 1
    110e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	a0 e8       	ldi	r26, 0x80	; 128
    1118:	bf e3       	ldi	r27, 0x3F	; 63
    111a:	8b 87       	std	Y+11, r24	; 0x0b
    111c:	9c 87       	std	Y+12, r25	; 0x0c
    111e:	ad 87       	std	Y+13, r26	; 0x0d
    1120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1122:	6b 85       	ldd	r22, Y+11	; 0x0b
    1124:	7c 85       	ldd	r23, Y+12	; 0x0c
    1126:	8d 85       	ldd	r24, Y+13	; 0x0d
    1128:	9e 85       	ldd	r25, Y+14	; 0x0e
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	4a ef       	ldi	r20, 0xFA	; 250
    1130:	54 e4       	ldi	r21, 0x44	; 68
    1132:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	8f 83       	std	Y+7, r24	; 0x07
    113c:	98 87       	std	Y+8, r25	; 0x08
    113e:	a9 87       	std	Y+9, r26	; 0x09
    1140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1142:	6f 81       	ldd	r22, Y+7	; 0x07
    1144:	78 85       	ldd	r23, Y+8	; 0x08
    1146:	89 85       	ldd	r24, Y+9	; 0x09
    1148:	9a 85       	ldd	r25, Y+10	; 0x0a
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e8       	ldi	r20, 0x80	; 128
    1150:	5f e3       	ldi	r21, 0x3F	; 63
    1152:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1156:	88 23       	and	r24, r24
    1158:	2c f4       	brge	.+10     	; 0x1164 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9e 83       	std	Y+6, r25	; 0x06
    1160:	8d 83       	std	Y+5, r24	; 0x05
    1162:	3f c0       	rjmp	.+126    	; 0x11e2 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1164:	6f 81       	ldd	r22, Y+7	; 0x07
    1166:	78 85       	ldd	r23, Y+8	; 0x08
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	9a 85       	ldd	r25, Y+10	; 0x0a
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	3f ef       	ldi	r19, 0xFF	; 255
    1170:	4f e7       	ldi	r20, 0x7F	; 127
    1172:	57 e4       	ldi	r21, 0x47	; 71
    1174:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1178:	18 16       	cp	r1, r24
    117a:	4c f5       	brge	.+82     	; 0x11ce <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117c:	6b 85       	ldd	r22, Y+11	; 0x0b
    117e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e2       	ldi	r20, 0x20	; 32
    118a:	51 e4       	ldi	r21, 0x41	; 65
    118c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9e 83       	std	Y+6, r25	; 0x06
    11a2:	8d 83       	std	Y+5, r24	; 0x05
    11a4:	0f c0       	rjmp	.+30     	; 0x11c4 <CLCD_voidSendCommand+0xee>
    11a6:	88 ec       	ldi	r24, 0xC8	; 200
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <CLCD_voidSendCommand+0xdc>
    11b6:	9c 83       	std	Y+4, r25	; 0x04
    11b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	69 f7       	brne	.-38     	; 0x11a6 <CLCD_voidSendCommand+0xd0>
    11cc:	14 c0       	rjmp	.+40     	; 0x11f6 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <CLCD_voidSendCommand+0x118>
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    DIO_voidSetPinValue(CTRL_PORT,ENA,PIN_LOW);
    11f6:	84 e0       	ldi	r24, 0x04	; 4
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>

}
    1200:	2f 96       	adiw	r28, 0x0f	; 15
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <CLCD_voidInit>:
void CLCD_voidInit(void){
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	e8 97       	sbiw	r28, 0x38	; 56
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(DATA_PORT,PORT_OUT);
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	6f ef       	ldi	r22, 0xFF	; 255
    122a:	0e 94 82 0c 	call	0x1904	; 0x1904 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(CTRL_PORT,ENA,PIN_OUT);
    122e:	84 e0       	ldi	r24, 0x04	; 4
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CTRL_PORT,RW,PIN_OUT);
    1238:	84 e0       	ldi	r24, 0x04	; 4
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CTRL_PORT,RS,PIN_OUT);
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	62 e0       	ldi	r22, 0x02	; 2
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a0 e8       	ldi	r26, 0x80	; 128
    1252:	bf e3       	ldi	r27, 0x3F	; 63
    1254:	8d ab       	std	Y+53, r24	; 0x35
    1256:	9e ab       	std	Y+54, r25	; 0x36
    1258:	af ab       	std	Y+55, r26	; 0x37
    125a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125c:	6d a9       	ldd	r22, Y+53	; 0x35
    125e:	7e a9       	ldd	r23, Y+54	; 0x36
    1260:	8f a9       	ldd	r24, Y+55	; 0x37
    1262:	98 ad       	ldd	r25, Y+56	; 0x38
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	4a ef       	ldi	r20, 0xFA	; 250
    126a:	54 e4       	ldi	r21, 0x44	; 68
    126c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	89 ab       	std	Y+49, r24	; 0x31
    1276:	9a ab       	std	Y+50, r25	; 0x32
    1278:	ab ab       	std	Y+51, r26	; 0x33
    127a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    127c:	69 a9       	ldd	r22, Y+49	; 0x31
    127e:	7a a9       	ldd	r23, Y+50	; 0x32
    1280:	8b a9       	ldd	r24, Y+51	; 0x33
    1282:	9c a9       	ldd	r25, Y+52	; 0x34
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e8       	ldi	r20, 0x80	; 128
    128a:	5f e3       	ldi	r21, 0x3F	; 63
    128c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1290:	88 23       	and	r24, r24
    1292:	2c f4       	brge	.+10     	; 0x129e <CLCD_voidInit+0x8c>
		__ticks = 1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	98 ab       	std	Y+48, r25	; 0x30
    129a:	8f a7       	std	Y+47, r24	; 0x2f
    129c:	3f c0       	rjmp	.+126    	; 0x131c <CLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    129e:	69 a9       	ldd	r22, Y+49	; 0x31
    12a0:	7a a9       	ldd	r23, Y+50	; 0x32
    12a2:	8b a9       	ldd	r24, Y+51	; 0x33
    12a4:	9c a9       	ldd	r25, Y+52	; 0x34
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	3f ef       	ldi	r19, 0xFF	; 255
    12aa:	4f e7       	ldi	r20, 0x7F	; 127
    12ac:	57 e4       	ldi	r21, 0x47	; 71
    12ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    12b2:	18 16       	cp	r1, r24
    12b4:	4c f5       	brge	.+82     	; 0x1308 <CLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b6:	6d a9       	ldd	r22, Y+53	; 0x35
    12b8:	7e a9       	ldd	r23, Y+54	; 0x36
    12ba:	8f a9       	ldd	r24, Y+55	; 0x37
    12bc:	98 ad       	ldd	r25, Y+56	; 0x38
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e2       	ldi	r20, 0x20	; 32
    12c4:	51 e4       	ldi	r21, 0x41	; 65
    12c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	98 ab       	std	Y+48, r25	; 0x30
    12dc:	8f a7       	std	Y+47, r24	; 0x2f
    12de:	0f c0       	rjmp	.+30     	; 0x12fe <CLCD_voidInit+0xec>
    12e0:	88 ec       	ldi	r24, 0xC8	; 200
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9e a7       	std	Y+46, r25	; 0x2e
    12e6:	8d a7       	std	Y+45, r24	; 0x2d
    12e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    12ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <CLCD_voidInit+0xda>
    12f0:	9e a7       	std	Y+46, r25	; 0x2e
    12f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f6:	98 a9       	ldd	r25, Y+48	; 0x30
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	98 ab       	std	Y+48, r25	; 0x30
    12fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1300:	98 a9       	ldd	r25, Y+48	; 0x30
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	69 f7       	brne	.-38     	; 0x12e0 <CLCD_voidInit+0xce>
    1306:	14 c0       	rjmp	.+40     	; 0x1330 <CLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1308:	69 a9       	ldd	r22, Y+49	; 0x31
    130a:	7a a9       	ldd	r23, Y+50	; 0x32
    130c:	8b a9       	ldd	r24, Y+51	; 0x33
    130e:	9c a9       	ldd	r25, Y+52	; 0x34
    1310:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	98 ab       	std	Y+48, r25	; 0x30
    131a:	8f a7       	std	Y+47, r24	; 0x2f
    131c:	8f a5       	ldd	r24, Y+47	; 0x2f
    131e:	98 a9       	ldd	r25, Y+48	; 0x30
    1320:	9c a7       	std	Y+44, r25	; 0x2c
    1322:	8b a7       	std	Y+43, r24	; 0x2b
    1324:	8b a5       	ldd	r24, Y+43	; 0x2b
    1326:	9c a5       	ldd	r25, Y+44	; 0x2c
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <CLCD_voidInit+0x116>
    132c:	9c a7       	std	Y+44, r25	; 0x2c
    132e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    CLCD_voidSendCommand(0b00111000);
    1330:	88 e3       	ldi	r24, 0x38	; 56
    1332:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <CLCD_voidSendCommand>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a0 e8       	ldi	r26, 0x80	; 128
    133c:	bf e3       	ldi	r27, 0x3F	; 63
    133e:	8f a3       	std	Y+39, r24	; 0x27
    1340:	98 a7       	std	Y+40, r25	; 0x28
    1342:	a9 a7       	std	Y+41, r26	; 0x29
    1344:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1346:	6f a1       	ldd	r22, Y+39	; 0x27
    1348:	78 a5       	ldd	r23, Y+40	; 0x28
    134a:	89 a5       	ldd	r24, Y+41	; 0x29
    134c:	9a a5       	ldd	r25, Y+42	; 0x2a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4a ef       	ldi	r20, 0xFA	; 250
    1354:	54 e4       	ldi	r21, 0x44	; 68
    1356:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	8b a3       	std	Y+35, r24	; 0x23
    1360:	9c a3       	std	Y+36, r25	; 0x24
    1362:	ad a3       	std	Y+37, r26	; 0x25
    1364:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1366:	6b a1       	ldd	r22, Y+35	; 0x23
    1368:	7c a1       	ldd	r23, Y+36	; 0x24
    136a:	8d a1       	ldd	r24, Y+37	; 0x25
    136c:	9e a1       	ldd	r25, Y+38	; 0x26
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <CLCD_voidInit+0x176>
		__ticks = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9a a3       	std	Y+34, r25	; 0x22
    1384:	89 a3       	std	Y+33, r24	; 0x21
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <CLCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    1388:	6b a1       	ldd	r22, Y+35	; 0x23
    138a:	7c a1       	ldd	r23, Y+36	; 0x24
    138c:	8d a1       	ldd	r24, Y+37	; 0x25
    138e:	9e a1       	ldd	r25, Y+38	; 0x26
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	4c f5       	brge	.+82     	; 0x13f2 <CLCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a0:	6f a1       	ldd	r22, Y+39	; 0x27
    13a2:	78 a5       	ldd	r23, Y+40	; 0x28
    13a4:	89 a5       	ldd	r24, Y+41	; 0x29
    13a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9a a3       	std	Y+34, r25	; 0x22
    13c6:	89 a3       	std	Y+33, r24	; 0x21
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <CLCD_voidInit+0x1d6>
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	98 a3       	std	Y+32, r25	; 0x20
    13d0:	8f 8f       	std	Y+31, r24	; 0x1f
    13d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13d4:	98 a1       	ldd	r25, Y+32	; 0x20
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <CLCD_voidInit+0x1c4>
    13da:	98 a3       	std	Y+32, r25	; 0x20
    13dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13de:	89 a1       	ldd	r24, Y+33	; 0x21
    13e0:	9a a1       	ldd	r25, Y+34	; 0x22
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	9a a3       	std	Y+34, r25	; 0x22
    13e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ea:	9a a1       	ldd	r25, Y+34	; 0x22
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f7       	brne	.-38     	; 0x13ca <CLCD_voidInit+0x1b8>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <CLCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f2:	6b a1       	ldd	r22, Y+35	; 0x23
    13f4:	7c a1       	ldd	r23, Y+36	; 0x24
    13f6:	8d a1       	ldd	r24, Y+37	; 0x25
    13f8:	9e a1       	ldd	r25, Y+38	; 0x26
    13fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9a a3       	std	Y+34, r25	; 0x22
    1404:	89 a3       	std	Y+33, r24	; 0x21
    1406:	89 a1       	ldd	r24, Y+33	; 0x21
    1408:	9a a1       	ldd	r25, Y+34	; 0x22
    140a:	9e 8f       	std	Y+30, r25	; 0x1e
    140c:	8d 8f       	std	Y+29, r24	; 0x1d
    140e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1410:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <CLCD_voidInit+0x200>
    1416:	9e 8f       	std	Y+30, r25	; 0x1e
    1418:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    CLCD_voidSendCommand(0b00001100);
    141a:	8c e0       	ldi	r24, 0x0C	; 12
    141c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <CLCD_voidSendCommand>
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a0 e8       	ldi	r26, 0x80	; 128
    1426:	bf e3       	ldi	r27, 0x3F	; 63
    1428:	89 8f       	std	Y+25, r24	; 0x19
    142a:	9a 8f       	std	Y+26, r25	; 0x1a
    142c:	ab 8f       	std	Y+27, r26	; 0x1b
    142e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1430:	69 8d       	ldd	r22, Y+25	; 0x19
    1432:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1434:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1436:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	4a ef       	ldi	r20, 0xFA	; 250
    143e:	54 e4       	ldi	r21, 0x44	; 68
    1440:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	8d 8b       	std	Y+21, r24	; 0x15
    144a:	9e 8b       	std	Y+22, r25	; 0x16
    144c:	af 8b       	std	Y+23, r26	; 0x17
    144e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1450:	6d 89       	ldd	r22, Y+21	; 0x15
    1452:	7e 89       	ldd	r23, Y+22	; 0x16
    1454:	8f 89       	ldd	r24, Y+23	; 0x17
    1456:	98 8d       	ldd	r25, Y+24	; 0x18
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e8       	ldi	r20, 0x80	; 128
    145e:	5f e3       	ldi	r21, 0x3F	; 63
    1460:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1464:	88 23       	and	r24, r24
    1466:	2c f4       	brge	.+10     	; 0x1472 <CLCD_voidInit+0x260>
		__ticks = 1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9c 8b       	std	Y+20, r25	; 0x14
    146e:	8b 8b       	std	Y+19, r24	; 0x13
    1470:	3f c0       	rjmp	.+126    	; 0x14f0 <CLCD_voidInit+0x2de>
	else if (__tmp > 65535)
    1472:	6d 89       	ldd	r22, Y+21	; 0x15
    1474:	7e 89       	ldd	r23, Y+22	; 0x16
    1476:	8f 89       	ldd	r24, Y+23	; 0x17
    1478:	98 8d       	ldd	r25, Y+24	; 0x18
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	3f ef       	ldi	r19, 0xFF	; 255
    147e:	4f e7       	ldi	r20, 0x7F	; 127
    1480:	57 e4       	ldi	r21, 0x47	; 71
    1482:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1486:	18 16       	cp	r1, r24
    1488:	4c f5       	brge	.+82     	; 0x14dc <CLCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148a:	69 8d       	ldd	r22, Y+25	; 0x19
    148c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    148e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1490:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e2       	ldi	r20, 0x20	; 32
    1498:	51 e4       	ldi	r21, 0x41	; 65
    149a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	bc 01       	movw	r22, r24
    14a4:	cd 01       	movw	r24, r26
    14a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	9c 8b       	std	Y+20, r25	; 0x14
    14b0:	8b 8b       	std	Y+19, r24	; 0x13
    14b2:	0f c0       	rjmp	.+30     	; 0x14d2 <CLCD_voidInit+0x2c0>
    14b4:	88 ec       	ldi	r24, 0xC8	; 200
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9a 8b       	std	Y+18, r25	; 0x12
    14ba:	89 8b       	std	Y+17, r24	; 0x11
    14bc:	89 89       	ldd	r24, Y+17	; 0x11
    14be:	9a 89       	ldd	r25, Y+18	; 0x12
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <CLCD_voidInit+0x2ae>
    14c4:	9a 8b       	std	Y+18, r25	; 0x12
    14c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ca:	9c 89       	ldd	r25, Y+20	; 0x14
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9c 8b       	std	Y+20, r25	; 0x14
    14d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d2:	8b 89       	ldd	r24, Y+19	; 0x13
    14d4:	9c 89       	ldd	r25, Y+20	; 0x14
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	69 f7       	brne	.-38     	; 0x14b4 <CLCD_voidInit+0x2a2>
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <CLCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14dc:	6d 89       	ldd	r22, Y+21	; 0x15
    14de:	7e 89       	ldd	r23, Y+22	; 0x16
    14e0:	8f 89       	ldd	r24, Y+23	; 0x17
    14e2:	98 8d       	ldd	r25, Y+24	; 0x18
    14e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	9c 8b       	std	Y+20, r25	; 0x14
    14ee:	8b 8b       	std	Y+19, r24	; 0x13
    14f0:	8b 89       	ldd	r24, Y+19	; 0x13
    14f2:	9c 89       	ldd	r25, Y+20	; 0x14
    14f4:	98 8b       	std	Y+16, r25	; 0x10
    14f6:	8f 87       	std	Y+15, r24	; 0x0f
    14f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fa:	98 89       	ldd	r25, Y+16	; 0x10
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <CLCD_voidInit+0x2ea>
    1500:	98 8b       	std	Y+16, r25	; 0x10
    1502:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    CLCD_voidSendCommand(0b00000001);
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <CLCD_voidSendCommand>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e8       	ldi	r26, 0x80	; 128
    1510:	bf e3       	ldi	r27, 0x3F	; 63
    1512:	8b 87       	std	Y+11, r24	; 0x0b
    1514:	9c 87       	std	Y+12, r25	; 0x0c
    1516:	ad 87       	std	Y+13, r26	; 0x0d
    1518:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151a:	6b 85       	ldd	r22, Y+11	; 0x0b
    151c:	7c 85       	ldd	r23, Y+12	; 0x0c
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4a ef       	ldi	r20, 0xFA	; 250
    1528:	54 e4       	ldi	r21, 0x44	; 68
    152a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8f 83       	std	Y+7, r24	; 0x07
    1534:	98 87       	std	Y+8, r25	; 0x08
    1536:	a9 87       	std	Y+9, r26	; 0x09
    1538:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    154e:	88 23       	and	r24, r24
    1550:	2c f4       	brge	.+10     	; 0x155c <CLCD_voidInit+0x34a>
		__ticks = 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
    155a:	3f c0       	rjmp	.+126    	; 0x15da <CLCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    155c:	6f 81       	ldd	r22, Y+7	; 0x07
    155e:	78 85       	ldd	r23, Y+8	; 0x08
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	3f ef       	ldi	r19, 0xFF	; 255
    1568:	4f e7       	ldi	r20, 0x7F	; 127
    156a:	57 e4       	ldi	r21, 0x47	; 71
    156c:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1570:	18 16       	cp	r1, r24
    1572:	4c f5       	brge	.+82     	; 0x15c6 <CLCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1574:	6b 85       	ldd	r22, Y+11	; 0x0b
    1576:	7c 85       	ldd	r23, Y+12	; 0x0c
    1578:	8d 85       	ldd	r24, Y+13	; 0x0d
    157a:	9e 85       	ldd	r25, Y+14	; 0x0e
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <CLCD_voidInit+0x3aa>
    159e:	88 ec       	ldi	r24, 0xC8	; 200
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <CLCD_voidInit+0x398>
    15ae:	9c 83       	std	Y+4, r25	; 0x04
    15b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	69 f7       	brne	.-38     	; 0x159e <CLCD_voidInit+0x38c>
    15c4:	14 c0       	rjmp	.+40     	; 0x15ee <CLCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <CLCD_voidInit+0x3d4>
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    15ee:	e8 96       	adiw	r28, 0x38	; 56
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <CLCD_voidSendString>:

void CLCD_voidSendString(u8 *copy_u8Data){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <CLCD_voidSendString+0x6>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9b 83       	std	Y+3, r25	; 0x03
    160e:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOCAL_u8CopyStr=0;
    1610:	19 82       	std	Y+1, r1	; 0x01
    1612:	0e c0       	rjmp	.+28     	; 0x1630 <CLCD_voidSendString+0x30>
    while(copy_u8Data[LOCAL_u8CopyStr] != '\0'){
    	CLCD_voidSendData(copy_u8Data[LOCAL_u8CopyStr]);
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	9b 81       	ldd	r25, Y+3	; 0x03
    161e:	fc 01       	movw	r30, r24
    1620:	e2 0f       	add	r30, r18
    1622:	f3 1f       	adc	r31, r19
    1624:	80 81       	ld	r24, Z
    1626:	0e 94 cd 07 	call	0xf9a	; 0xf9a <CLCD_voidSendData>
    	LOCAL_u8CopyStr++;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	8f 5f       	subi	r24, 0xFF	; 255
    162e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}

void CLCD_voidSendString(u8 *copy_u8Data){
	u8 LOCAL_u8CopyStr=0;
    while(copy_u8Data[LOCAL_u8CopyStr] != '\0'){
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	fc 01       	movw	r30, r24
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	80 81       	ld	r24, Z
    1642:	88 23       	and	r24, r24
    1644:	39 f7       	brne	.-50     	; 0x1614 <CLCD_voidSendString+0x14>
    	CLCD_voidSendData(copy_u8Data[LOCAL_u8CopyStr]);
    	LOCAL_u8CopyStr++;

    }
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <CLCD_voidSetPosition>:

void CLCD_voidSetPosition(u8 Copy_u8HorizontalValue,u8 copy_u8AbsVerticalValue){
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <CLCD_voidSetPosition+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <CLCD_voidSetPosition+0x8>
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	8a 83       	std	Y+2, r24	; 0x02
    1662:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Position=0;
    1664:	19 82       	std	Y+1, r1	; 0x01
    switch (copy_u8AbsVerticalValue)
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3d 83       	std	Y+5, r19	; 0x05
    166e:	2c 83       	std	Y+4, r18	; 0x04
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	31 f0       	breq	.+12     	; 0x1684 <CLCD_voidSetPosition+0x32>
    1678:	2c 81       	ldd	r18, Y+4	; 0x04
    167a:	3d 81       	ldd	r19, Y+5	; 0x05
    167c:	21 30       	cpi	r18, 0x01	; 1
    167e:	31 05       	cpc	r19, r1
    1680:	21 f0       	breq	.+8      	; 0x168a <CLCD_voidSetPosition+0x38>
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <CLCD_voidSetPosition+0x3e>
    {
    case 0:
        Local_u8Position=Copy_u8HorizontalValue;
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <CLCD_voidSetPosition+0x3e>
        break;
    case 1:
        Local_u8Position=Copy_u8HorizontalValue+LINE_BASE1;
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	80 5c       	subi	r24, 0xC0	; 192
    168e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
        CLCD_voidSendCommand(Local_u8Position+DDRAM_MSB);
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	80 58       	subi	r24, 0x80	; 128
    1694:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <CLCD_voidSendCommand>
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(){
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    CLCD_voidSendCommand(1);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <CLCD_voidSendCommand>
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(u8 Copy_u8BlockNum, u8 Copy_HorizontalValue,u8 copy_AbsVerticalValue,u8 *Pu8ArrayPattern){
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	27 97       	sbiw	r28, 0x07	; 7
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    16d2:	6c 83       	std	Y+4, r22	; 0x04
    16d4:	4d 83       	std	Y+5, r20	; 0x05
    16d6:	3f 83       	std	Y+7, r19	; 0x07
    16d8:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8AddressPosition=Copy_u8BlockNum*8;
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	8a 83       	std	Y+2, r24	; 0x02
    //go to CGRAM -->CMD SETT_GCRAM_ADD
    CLCD_voidSendCommand(Local_u8AddressPosition+CGRAM_MSB);
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	80 5c       	subi	r24, 0xC0	; 192
    16f2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <CLCD_voidSendCommand>
    //START DRAWING PATTERN
    for (u8 i = 0; i < 8; i++)
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <CLCD_voidSendSpecialCharacter+0x5a>
    {
        CLCD_voidSendData(Pu8ArrayPattern[i]);
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	9f 81       	ldd	r25, Y+7	; 0x07
    1704:	fc 01       	movw	r30, r24
    1706:	e2 0f       	add	r30, r18
    1708:	f3 1f       	adc	r31, r19
    170a:	80 81       	ld	r24, Z
    170c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <CLCD_voidSendData>
void CLCD_voidSendSpecialCharacter(u8 Copy_u8BlockNum, u8 Copy_HorizontalValue,u8 copy_AbsVerticalValue,u8 *Pu8ArrayPattern){
    u8 Local_u8AddressPosition=Copy_u8BlockNum*8;
    //go to CGRAM -->CMD SETT_GCRAM_ADD
    CLCD_voidSendCommand(Local_u8AddressPosition+CGRAM_MSB);
    //START DRAWING PATTERN
    for (u8 i = 0; i < 8; i++)
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	8f 5f       	subi	r24, 0xFF	; 255
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	78 f3       	brcs	.-34     	; 0x16fa <CLCD_voidSendSpecialCharacter+0x3e>
    {
        CLCD_voidSendData(Pu8ArrayPattern[i]);
    }
    //DISPLAY PATTERN
    CLCD_voidSetPosition(Copy_HorizontalValue,copy_AbsVerticalValue);
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	6d 81       	ldd	r22, Y+5	; 0x05
    1720:	0e 94 29 0b 	call	0x1652	; 0x1652 <CLCD_voidSetPosition>
    CLCD_voidSendData(Copy_u8BlockNum);
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	0e 94 cd 07 	call	0xf9a	; 0xf9a <CLCD_voidSendData>



}
    172a:	27 96       	adiw	r28, 0x07	; 7
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <CLCD_voidSendNum>:

void CLCD_voidSendNum(u16 Copy_u16Num){
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	c7 57       	subi	r28, 0x77	; 119
    174a:	d0 40       	sbci	r29, 0x00	; 0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	fe 01       	movw	r30, r28
    1758:	ea 58       	subi	r30, 0x8A	; 138
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
    u8 LOCAL_u8CopyNum,LOCAL_u8counter=0;
    1760:	18 8a       	std	Y+16, r1	; 0x10
    u8 arr[100]={0};
    1762:	84 e6       	ldi	r24, 0x64	; 100
    1764:	fe 01       	movw	r30, r28
    1766:	72 96       	adiw	r30, 0x12	; 18
    1768:	df 01       	movw	r26, r30
    176a:	98 2f       	mov	r25, r24
    176c:	1d 92       	st	X+, r1
    176e:	9a 95       	dec	r25
    1770:	e9 f7       	brne	.-6      	; 0x176c <CLCD_voidSendNum+0x30>
    do{
        LOCAL_u8CopyNum=Copy_u16Num%10;
    1772:	fe 01       	movw	r30, r28
    1774:	ea 58       	subi	r30, 0x8A	; 138
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	2a e0       	ldi	r18, 0x0A	; 10
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	b9 01       	movw	r22, r18
    1782:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <__udivmodhi4>
    1786:	89 8b       	std	Y+17, r24	; 0x11
        Copy_u16Num/=10;
    1788:	8e 01       	movw	r16, r28
    178a:	0a 58       	subi	r16, 0x8A	; 138
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	fe 01       	movw	r30, r28
    1790:	ea 58       	subi	r30, 0x8A	; 138
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	b9 01       	movw	r22, r18
    179e:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <__udivmodhi4>
    17a2:	cb 01       	movw	r24, r22
    17a4:	d8 01       	movw	r26, r16
    17a6:	11 96       	adiw	r26, 0x01	; 1
    17a8:	9c 93       	st	X, r25
    17aa:	8e 93       	st	-X, r24
        arr[LOCAL_u8counter]=LOCAL_u8CopyNum + '0';
    17ac:	88 89       	ldd	r24, Y+16	; 0x10
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	89 89       	ldd	r24, Y+17	; 0x11
    17b4:	48 2f       	mov	r20, r24
    17b6:	40 5d       	subi	r20, 0xD0	; 208
    17b8:	ce 01       	movw	r24, r28
    17ba:	42 96       	adiw	r24, 0x12	; 18
    17bc:	fc 01       	movw	r30, r24
    17be:	e2 0f       	add	r30, r18
    17c0:	f3 1f       	adc	r31, r19
    17c2:	40 83       	st	Z, r20
        LOCAL_u8counter++;
    17c4:	88 89       	ldd	r24, Y+16	; 0x10
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	88 8b       	std	Y+16, r24	; 0x10
    }while(Copy_u16Num !=0 );
    17ca:	fe 01       	movw	r30, r28
    17cc:	ea 58       	subi	r30, 0x8A	; 138
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f6       	brne	.-102    	; 0x1772 <CLCD_voidSendNum+0x36>
    for (u8 i = LOCAL_u8counter; i >0 ; i--)
    17d8:	88 89       	ldd	r24, Y+16	; 0x10
    17da:	8f 87       	std	Y+15, r24	; 0x0f
    17dc:	83 c0       	rjmp	.+262    	; 0x18e4 <CLCD_voidSendNum+0x1a8>
    {
        CLCD_voidSendData(arr[i-1]);
    17de:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9c 01       	movw	r18, r24
    17e6:	21 50       	subi	r18, 0x01	; 1
    17e8:	30 40       	sbci	r19, 0x00	; 0
    17ea:	ce 01       	movw	r24, r28
    17ec:	42 96       	adiw	r24, 0x12	; 18
    17ee:	fc 01       	movw	r30, r24
    17f0:	e2 0f       	add	r30, r18
    17f2:	f3 1f       	adc	r31, r19
    17f4:	80 81       	ld	r24, Z
    17f6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <CLCD_voidSendData>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e8       	ldi	r26, 0x80	; 128
    1800:	bf e3       	ldi	r27, 0x3F	; 63
    1802:	8b 87       	std	Y+11, r24	; 0x0b
    1804:	9c 87       	std	Y+12, r25	; 0x0c
    1806:	ad 87       	std	Y+13, r26	; 0x0d
    1808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	6b 85       	ldd	r22, Y+11	; 0x0b
    180c:	7c 85       	ldd	r23, Y+12	; 0x0c
    180e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1810:	9e 85       	ldd	r25, Y+14	; 0x0e
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a ef       	ldi	r20, 0xFA	; 250
    1818:	54 e4       	ldi	r21, 0x44	; 68
    181a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8f 83       	std	Y+7, r24	; 0x07
    1824:	98 87       	std	Y+8, r25	; 0x08
    1826:	a9 87       	std	Y+9, r26	; 0x09
    1828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	2c f4       	brge	.+10     	; 0x184c <CLCD_voidSendNum+0x110>
		__ticks = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	3f c0       	rjmp	.+126    	; 0x18ca <CLCD_voidSendNum+0x18e>
	else if (__tmp > 65535)
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	57 e4       	ldi	r21, 0x47	; 71
    185c:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	4c f5       	brge	.+82     	; 0x18b6 <CLCD_voidSendNum+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	6b 85       	ldd	r22, Y+11	; 0x0b
    1866:	7c 85       	ldd	r23, Y+12	; 0x0c
    1868:	8d 85       	ldd	r24, Y+13	; 0x0d
    186a:	9e 85       	ldd	r25, Y+14	; 0x0e
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e2       	ldi	r20, 0x20	; 32
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <CLCD_voidSendNum+0x170>
    188e:	88 ec       	ldi	r24, 0xC8	; 200
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <CLCD_voidSendNum+0x15e>
    189e:	9c 83       	std	Y+4, r25	; 0x04
    18a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	69 f7       	brne	.-38     	; 0x188e <CLCD_voidSendNum+0x152>
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <CLCD_voidSendNum+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	6f 81       	ldd	r22, Y+7	; 0x07
    18b8:	78 85       	ldd	r23, Y+8	; 0x08
    18ba:	89 85       	ldd	r24, Y+9	; 0x09
    18bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <CLCD_voidSendNum+0x19a>
    18da:	9a 83       	std	Y+2, r25	; 0x02
    18dc:	89 83       	std	Y+1, r24	; 0x01
        LOCAL_u8CopyNum=Copy_u16Num%10;
        Copy_u16Num/=10;
        arr[LOCAL_u8counter]=LOCAL_u8CopyNum + '0';
        LOCAL_u8counter++;
    }while(Copy_u16Num !=0 );
    for (u8 i = LOCAL_u8counter; i >0 ; i--)
    18de:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e0:	81 50       	subi	r24, 0x01	; 1
    18e2:	8f 87       	std	Y+15, r24	; 0x0f
    18e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e6:	88 23       	and	r24, r24
    18e8:	09 f0       	breq	.+2      	; 0x18ec <CLCD_voidSendNum+0x1b0>
    18ea:	79 cf       	rjmp	.-270    	; 0x17de <CLCD_voidSendNum+0xa2>
    {
        CLCD_voidSendData(arr[i-1]);
        _delay_ms(1);
    }
}
    18ec:	c9 58       	subi	r28, 0x89	; 137
    18ee:	df 4f       	sbci	r29, 0xFF	; 255
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <DIO_voidSetPortDirection>:
#include "BIT_MATH.h"
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidSetPortDirection(u8 Copy_u8PortNum,u8 Copy_u8PortDirection){
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <DIO_voidSetPortDirection+0x6>
    190a:	00 d0       	rcall	.+0      	; 0x190c <DIO_voidSetPortDirection+0x8>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	6a 83       	std	Y+2, r22	; 0x02
switch (Copy_u8PortNum)
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	3c 83       	std	Y+4, r19	; 0x04
    191c:	2b 83       	std	Y+3, r18	; 0x03
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	91 05       	cpc	r25, r1
    1926:	d9 f0       	breq	.+54     	; 0x195e <DIO_voidSetPortDirection+0x5a>
    1928:	2b 81       	ldd	r18, Y+3	; 0x03
    192a:	3c 81       	ldd	r19, Y+4	; 0x04
    192c:	23 30       	cpi	r18, 0x03	; 3
    192e:	31 05       	cpc	r19, r1
    1930:	34 f4       	brge	.+12     	; 0x193e <DIO_voidSetPortDirection+0x3a>
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	91 05       	cpc	r25, r1
    193a:	61 f0       	breq	.+24     	; 0x1954 <DIO_voidSetPortDirection+0x50>
    193c:	1e c0       	rjmp	.+60     	; 0x197a <DIO_voidSetPortDirection+0x76>
    193e:	2b 81       	ldd	r18, Y+3	; 0x03
    1940:	3c 81       	ldd	r19, Y+4	; 0x04
    1942:	23 30       	cpi	r18, 0x03	; 3
    1944:	31 05       	cpc	r19, r1
    1946:	81 f0       	breq	.+32     	; 0x1968 <DIO_voidSetPortDirection+0x64>
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	91 05       	cpc	r25, r1
    1950:	81 f0       	breq	.+32     	; 0x1972 <DIO_voidSetPortDirection+0x6e>
    1952:	13 c0       	rjmp	.+38     	; 0x197a <DIO_voidSetPortDirection+0x76>
{
case PORT_u8A:
    DDRA=Copy_u8PortDirection;
    1954:	ea e3       	ldi	r30, 0x3A	; 58
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	80 83       	st	Z, r24
    195c:	0e c0       	rjmp	.+28     	; 0x197a <DIO_voidSetPortDirection+0x76>
    break;
case PORT_u8B:
    DDRB=Copy_u8PortDirection;
    195e:	e7 e3       	ldi	r30, 0x37	; 55
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	80 83       	st	Z, r24
    1966:	09 c0       	rjmp	.+18     	; 0x197a <DIO_voidSetPortDirection+0x76>
    break;
case PORT_u8C:
    DDRC=Copy_u8PortDirection;
    1968:	e4 e3       	ldi	r30, 0x34	; 52
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	80 83       	st	Z, r24
    1970:	04 c0       	rjmp	.+8      	; 0x197a <DIO_voidSetPortDirection+0x76>
    break;
case PORT_u8D:
    DDRD=Copy_u8PortDirection;
    1972:	e1 e3       	ldi	r30, 0x31	; 49
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	80 83       	st	Z, r24
    break;
default:
    break;
}
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8PortNum,u8 Copy_u8PinNum,u8 Copy_u8PinDirection){
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	27 97       	sbiw	r28, 0x07	; 7
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	6a 83       	std	Y+2, r22	; 0x02
    19a0:	4b 83       	std	Y+3, r20	; 0x03
    if (Copy_u8PinDirection==PIN_OUT)
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	09 f0       	breq	.+2      	; 0x19aa <DIO_voidSetPinDirection+0x22>
    19a8:	70 c0       	rjmp	.+224    	; 0x1a8a <DIO_voidSetPinDirection+0x102>
    {
        switch (Copy_u8PortNum)
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3f 83       	std	Y+7, r19	; 0x07
    19b2:	2e 83       	std	Y+6, r18	; 0x06
    19b4:	8e 81       	ldd	r24, Y+6	; 0x06
    19b6:	9f 81       	ldd	r25, Y+7	; 0x07
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	91 05       	cpc	r25, r1
    19bc:	51 f1       	breq	.+84     	; 0x1a12 <DIO_voidSetPinDirection+0x8a>
    19be:	2e 81       	ldd	r18, Y+6	; 0x06
    19c0:	3f 81       	ldd	r19, Y+7	; 0x07
    19c2:	23 30       	cpi	r18, 0x03	; 3
    19c4:	31 05       	cpc	r19, r1
    19c6:	34 f4       	brge	.+12     	; 0x19d4 <DIO_voidSetPinDirection+0x4c>
    19c8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ca:	9f 81       	ldd	r25, Y+7	; 0x07
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	91 05       	cpc	r25, r1
    19d0:	61 f0       	breq	.+24     	; 0x19ea <DIO_voidSetPinDirection+0x62>
    19d2:	cf c0       	rjmp	.+414    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
    19d4:	2e 81       	ldd	r18, Y+6	; 0x06
    19d6:	3f 81       	ldd	r19, Y+7	; 0x07
    19d8:	23 30       	cpi	r18, 0x03	; 3
    19da:	31 05       	cpc	r19, r1
    19dc:	71 f1       	breq	.+92     	; 0x1a3a <DIO_voidSetPinDirection+0xb2>
    19de:	8e 81       	ldd	r24, Y+6	; 0x06
    19e0:	9f 81       	ldd	r25, Y+7	; 0x07
    19e2:	84 30       	cpi	r24, 0x04	; 4
    19e4:	91 05       	cpc	r25, r1
    19e6:	e9 f1       	breq	.+122    	; 0x1a62 <DIO_voidSetPinDirection+0xda>
    19e8:	c4 c0       	rjmp	.+392    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
        {
        case PORT_u8A:
            SET_BIT(DDRA,Copy_u8PinNum);
    19ea:	aa e3       	ldi	r26, 0x3A	; 58
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	ea e3       	ldi	r30, 0x3A	; 58
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <DIO_voidSetPinDirection+0x80>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <DIO_voidSetPinDirection+0x7c>
    1a0c:	84 2b       	or	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	b0 c0       	rjmp	.+352    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
            break;
        case PORT_u8B:
            SET_BIT(DDRB,Copy_u8PinNum);
    1a12:	a7 e3       	ldi	r26, 0x37	; 55
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e7 e3       	ldi	r30, 0x37	; 55
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_voidSetPinDirection+0xa8>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_voidSetPinDirection+0xa4>
    1a34:	84 2b       	or	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	9c c0       	rjmp	.+312    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
            break;
        case PORT_u8C:
            SET_BIT(DDRC,Copy_u8PinNum);
    1a3a:	a4 e3       	ldi	r26, 0x34	; 52
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e4 e3       	ldi	r30, 0x34	; 52
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_voidSetPinDirection+0xd0>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <DIO_voidSetPinDirection+0xcc>
    1a5c:	84 2b       	or	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	88 c0       	rjmp	.+272    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
            break;
        case PORT_u8D:
            SET_BIT(DDRD,Copy_u8PinNum);
    1a62:	a1 e3       	ldi	r26, 0x31	; 49
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e1 e3       	ldi	r30, 0x31	; 49
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_voidSetPinDirection+0xf8>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_voidSetPinDirection+0xf4>
    1a84:	84 2b       	or	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	74 c0       	rjmp	.+232    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
            break;
        default:
            break;
        }
    }else{
        switch (Copy_u8PortNum)
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	3d 83       	std	Y+5, r19	; 0x05
    1a92:	2c 83       	std	Y+4, r18	; 0x04
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	9d 81       	ldd	r25, Y+5	; 0x05
    1a98:	82 30       	cpi	r24, 0x02	; 2
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	61 f1       	breq	.+88     	; 0x1af6 <DIO_voidSetPinDirection+0x16e>
    1a9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa0:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa2:	23 30       	cpi	r18, 0x03	; 3
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	34 f4       	brge	.+12     	; 0x1ab4 <DIO_voidSetPinDirection+0x12c>
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	91 05       	cpc	r25, r1
    1ab0:	69 f0       	breq	.+26     	; 0x1acc <DIO_voidSetPinDirection+0x144>
    1ab2:	5f c0       	rjmp	.+190    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
    1ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab8:	23 30       	cpi	r18, 0x03	; 3
    1aba:	31 05       	cpc	r19, r1
    1abc:	89 f1       	breq	.+98     	; 0x1b20 <DIO_voidSetPinDirection+0x198>
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac2:	84 30       	cpi	r24, 0x04	; 4
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <DIO_voidSetPinDirection+0x142>
    1ac8:	40 c0       	rjmp	.+128    	; 0x1b4a <DIO_voidSetPinDirection+0x1c2>
    1aca:	53 c0       	rjmp	.+166    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
        {
        case PORT_u8A:
            CLR_BIT(DDRA,Copy_u8PinNum);
    1acc:	aa e3       	ldi	r26, 0x3A	; 58
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ea e3       	ldi	r30, 0x3A	; 58
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 2e       	mov	r0, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_voidSetPinDirection+0x162>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <DIO_voidSetPinDirection+0x15e>
    1aee:	80 95       	com	r24
    1af0:	84 23       	and	r24, r20
    1af2:	8c 93       	st	X, r24
    1af4:	3e c0       	rjmp	.+124    	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
            break;
        case PORT_u8B:
            CLR_BIT(DDRB,Copy_u8PinNum);
    1af6:	a7 e3       	ldi	r26, 0x37	; 55
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e7 e3       	ldi	r30, 0x37	; 55
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <DIO_voidSetPinDirection+0x18c>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <DIO_voidSetPinDirection+0x188>
    1b18:	80 95       	com	r24
    1b1a:	84 23       	and	r24, r20
    1b1c:	8c 93       	st	X, r24
    1b1e:	29 c0       	rjmp	.+82     	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
            break;
        case PORT_u8C:
            CLR_BIT(DDRC,Copy_u8PinNum);
    1b20:	a4 e3       	ldi	r26, 0x34	; 52
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e4 e3       	ldi	r30, 0x34	; 52
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <DIO_voidSetPinDirection+0x1b6>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <DIO_voidSetPinDirection+0x1b2>
    1b42:	80 95       	com	r24
    1b44:	84 23       	and	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <DIO_voidSetPinDirection+0x1ea>
            break;
        case PORT_u8D:
            CLR_BIT(DDRD,Copy_u8PinNum);
    1b4a:	a1 e3       	ldi	r26, 0x31	; 49
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e1 e3       	ldi	r30, 0x31	; 49
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_voidSetPinDirection+0x1e0>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <DIO_voidSetPinDirection+0x1dc>
    1b6c:	80 95       	com	r24
    1b6e:	84 23       	and	r24, r20
    1b70:	8c 93       	st	X, r24
        default:
            break;
        }
    }
    
}
    1b72:	27 96       	adiw	r28, 0x07	; 7
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortNum,u8 Copy_u8PortValue){
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <DIO_voidSetPortValue+0x6>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <DIO_voidSetPortValue+0x8>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	6a 83       	std	Y+2, r22	; 0x02
switch (Copy_u8PortNum)
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	3c 83       	std	Y+4, r19	; 0x04
    1b9c:	2b 83       	std	Y+3, r18	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	82 30       	cpi	r24, 0x02	; 2
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	d9 f0       	breq	.+54     	; 0x1bde <DIO_voidSetPortValue+0x5a>
    1ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    1baa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bac:	23 30       	cpi	r18, 0x03	; 3
    1bae:	31 05       	cpc	r19, r1
    1bb0:	34 f4       	brge	.+12     	; 0x1bbe <DIO_voidSetPortValue+0x3a>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <DIO_voidSetPortValue+0x50>
    1bbc:	1e c0       	rjmp	.+60     	; 0x1bfa <DIO_voidSetPortValue+0x76>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	23 30       	cpi	r18, 0x03	; 3
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	81 f0       	breq	.+32     	; 0x1be8 <DIO_voidSetPortValue+0x64>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	84 30       	cpi	r24, 0x04	; 4
    1bce:	91 05       	cpc	r25, r1
    1bd0:	81 f0       	breq	.+32     	; 0x1bf2 <DIO_voidSetPortValue+0x6e>
    1bd2:	13 c0       	rjmp	.+38     	; 0x1bfa <DIO_voidSetPortValue+0x76>
{
case PORT_u8A:
    PORTA=Copy_u8PortValue;
    1bd4:	eb e3       	ldi	r30, 0x3B	; 59
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	80 83       	st	Z, r24
    1bdc:	0e c0       	rjmp	.+28     	; 0x1bfa <DIO_voidSetPortValue+0x76>
    break;
case PORT_u8B:
    PORTB=Copy_u8PortValue;
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 83       	st	Z, r24
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <DIO_voidSetPortValue+0x76>
    break;
case PORT_u8C:
    PORTC=Copy_u8PortValue;
    1be8:	e5 e3       	ldi	r30, 0x35	; 53
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <DIO_voidSetPortValue+0x76>
    break;
case PORT_u8D:
    PORTD=Copy_u8PortValue;
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	80 83       	st	Z, r24
    break;
default:
    break;
}
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8PortNum,u8 Copy_u8PinNum,u8 Copy_u8PinValue){
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	27 97       	sbiw	r28, 0x07	; 7
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	6a 83       	std	Y+2, r22	; 0x02
    1c20:	4b 83       	std	Y+3, r20	; 0x03
    if (Copy_u8PinValue==PIN_HIGH)
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <DIO_voidSetPinValue+0x22>
    1c28:	70 c0       	rjmp	.+224    	; 0x1d0a <DIO_voidSetPinValue+0x102>
    {
        switch (Copy_u8PortNum)
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	3f 83       	std	Y+7, r19	; 0x07
    1c32:	2e 83       	std	Y+6, r18	; 0x06
    1c34:	8e 81       	ldd	r24, Y+6	; 0x06
    1c36:	9f 81       	ldd	r25, Y+7	; 0x07
    1c38:	82 30       	cpi	r24, 0x02	; 2
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	51 f1       	breq	.+84     	; 0x1c92 <DIO_voidSetPinValue+0x8a>
    1c3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c40:	3f 81       	ldd	r19, Y+7	; 0x07
    1c42:	23 30       	cpi	r18, 0x03	; 3
    1c44:	31 05       	cpc	r19, r1
    1c46:	34 f4       	brge	.+12     	; 0x1c54 <DIO_voidSetPinValue+0x4c>
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <DIO_voidSetPinValue+0x62>
    1c52:	cf c0       	rjmp	.+414    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
    1c54:	2e 81       	ldd	r18, Y+6	; 0x06
    1c56:	3f 81       	ldd	r19, Y+7	; 0x07
    1c58:	23 30       	cpi	r18, 0x03	; 3
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	71 f1       	breq	.+92     	; 0x1cba <DIO_voidSetPinValue+0xb2>
    1c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c60:	9f 81       	ldd	r25, Y+7	; 0x07
    1c62:	84 30       	cpi	r24, 0x04	; 4
    1c64:	91 05       	cpc	r25, r1
    1c66:	e9 f1       	breq	.+122    	; 0x1ce2 <DIO_voidSetPinValue+0xda>
    1c68:	c4 c0       	rjmp	.+392    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
        {
        case PORT_u8A:
            SET_BIT(PORTA,Copy_u8PinNum);
    1c6a:	ab e3       	ldi	r26, 0x3B	; 59
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	eb e3       	ldi	r30, 0x3B	; 59
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <DIO_voidSetPinValue+0x80>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <DIO_voidSetPinValue+0x7c>
    1c8c:	84 2b       	or	r24, r20
    1c8e:	8c 93       	st	X, r24
    1c90:	b0 c0       	rjmp	.+352    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
            break;
        case PORT_u8B:
            SET_BIT(PORTB,Copy_u8PinNum);
    1c92:	a8 e3       	ldi	r26, 0x38	; 56
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e8 e3       	ldi	r30, 0x38	; 56
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 2e       	mov	r0, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <DIO_voidSetPinValue+0xa8>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	0a 94       	dec	r0
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <DIO_voidSetPinValue+0xa4>
    1cb4:	84 2b       	or	r24, r20
    1cb6:	8c 93       	st	X, r24
    1cb8:	9c c0       	rjmp	.+312    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
            break;
        case PORT_u8C:
            SET_BIT(PORTC,Copy_u8PinNum);
    1cba:	a5 e3       	ldi	r26, 0x35	; 53
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e3       	ldi	r30, 0x35	; 53
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <DIO_voidSetPinValue+0xd0>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <DIO_voidSetPinValue+0xcc>
    1cdc:	84 2b       	or	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	88 c0       	rjmp	.+272    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
            break;
        case PORT_u8D:
            SET_BIT(PORTD,Copy_u8PinNum);
    1ce2:	a2 e3       	ldi	r26, 0x32	; 50
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e2 e3       	ldi	r30, 0x32	; 50
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_voidSetPinValue+0xf8>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_voidSetPinValue+0xf4>
    1d04:	84 2b       	or	r24, r20
    1d06:	8c 93       	st	X, r24
    1d08:	74 c0       	rjmp	.+232    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
            break;
        default:
            break;
        }
    }else{
        switch (Copy_u8PortNum)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	3d 83       	std	Y+5, r19	; 0x05
    1d12:	2c 83       	std	Y+4, r18	; 0x04
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	9d 81       	ldd	r25, Y+5	; 0x05
    1d18:	82 30       	cpi	r24, 0x02	; 2
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	61 f1       	breq	.+88     	; 0x1d76 <DIO_voidSetPinValue+0x16e>
    1d1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d20:	3d 81       	ldd	r19, Y+5	; 0x05
    1d22:	23 30       	cpi	r18, 0x03	; 3
    1d24:	31 05       	cpc	r19, r1
    1d26:	34 f4       	brge	.+12     	; 0x1d34 <DIO_voidSetPinValue+0x12c>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	69 f0       	breq	.+26     	; 0x1d4c <DIO_voidSetPinValue+0x144>
    1d32:	5f c0       	rjmp	.+190    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
    1d34:	2c 81       	ldd	r18, Y+4	; 0x04
    1d36:	3d 81       	ldd	r19, Y+5	; 0x05
    1d38:	23 30       	cpi	r18, 0x03	; 3
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	89 f1       	breq	.+98     	; 0x1da0 <DIO_voidSetPinValue+0x198>
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	84 30       	cpi	r24, 0x04	; 4
    1d44:	91 05       	cpc	r25, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <DIO_voidSetPinValue+0x142>
    1d48:	40 c0       	rjmp	.+128    	; 0x1dca <DIO_voidSetPinValue+0x1c2>
    1d4a:	53 c0       	rjmp	.+166    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
        {
        case PORT_u8A:
            CLR_BIT(PORTA,Copy_u8PinNum);
    1d4c:	ab e3       	ldi	r26, 0x3B	; 59
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	eb e3       	ldi	r30, 0x3B	; 59
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	48 2f       	mov	r20, r24
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 2e       	mov	r0, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <DIO_voidSetPinValue+0x162>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	0a 94       	dec	r0
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <DIO_voidSetPinValue+0x15e>
    1d6e:	80 95       	com	r24
    1d70:	84 23       	and	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	3e c0       	rjmp	.+124    	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
            break;
        case PORT_u8B:
            CLR_BIT(PORTB,Copy_u8PinNum);
    1d76:	a8 e3       	ldi	r26, 0x38	; 56
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e8 e3       	ldi	r30, 0x38	; 56
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_voidSetPinValue+0x18c>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_voidSetPinValue+0x188>
    1d98:	80 95       	com	r24
    1d9a:	84 23       	and	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	29 c0       	rjmp	.+82     	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
            break;
        case PORT_u8C:
            CLR_BIT(PORTC,Copy_u8PinNum);
    1da0:	a5 e3       	ldi	r26, 0x35	; 53
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e5 e3       	ldi	r30, 0x35	; 53
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	48 2f       	mov	r20, r24
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 2e       	mov	r0, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <DIO_voidSetPinValue+0x1b6>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	0a 94       	dec	r0
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <DIO_voidSetPinValue+0x1b2>
    1dc2:	80 95       	com	r24
    1dc4:	84 23       	and	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <DIO_voidSetPinValue+0x1ea>
            break;
        case PORT_u8D:
            CLR_BIT(PORTD,Copy_u8PinNum);
    1dca:	a2 e3       	ldi	r26, 0x32	; 50
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e2 e3       	ldi	r30, 0x32	; 50
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_voidSetPinValue+0x1e0>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_voidSetPinValue+0x1dc>
    1dec:	80 95       	com	r24
    1dee:	84 23       	and	r24, r20
    1df0:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    1df2:	27 96       	adiw	r28, 0x07	; 7
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortNum,u8 Copy_u8PinNum){
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <DIO_u8GetPinValue+0x6>
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <DIO_u8GetPinValue+0x8>
    1e0c:	0f 92       	push	r0
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	8a 83       	std	Y+2, r24	; 0x02
    1e14:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8PinState=0;
    1e16:	19 82       	std	Y+1, r1	; 0x01
        switch (Copy_u8PortNum)
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	3d 83       	std	Y+5, r19	; 0x05
    1e20:	2c 83       	std	Y+4, r18	; 0x04
    1e22:	4c 81       	ldd	r20, Y+4	; 0x04
    1e24:	5d 81       	ldd	r21, Y+5	; 0x05
    1e26:	42 30       	cpi	r20, 0x02	; 2
    1e28:	51 05       	cpc	r21, r1
    1e2a:	41 f1       	breq	.+80     	; 0x1e7c <DIO_u8GetPinValue+0x78>
    1e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e30:	83 30       	cpi	r24, 0x03	; 3
    1e32:	91 05       	cpc	r25, r1
    1e34:	34 f4       	brge	.+12     	; 0x1e42 <DIO_u8GetPinValue+0x3e>
    1e36:	2c 81       	ldd	r18, Y+4	; 0x04
    1e38:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3a:	21 30       	cpi	r18, 0x01	; 1
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	61 f0       	breq	.+24     	; 0x1e58 <DIO_u8GetPinValue+0x54>
    1e40:	52 c0       	rjmp	.+164    	; 0x1ee6 <DIO_u8GetPinValue+0xe2>
    1e42:	4c 81       	ldd	r20, Y+4	; 0x04
    1e44:	5d 81       	ldd	r21, Y+5	; 0x05
    1e46:	43 30       	cpi	r20, 0x03	; 3
    1e48:	51 05       	cpc	r21, r1
    1e4a:	51 f1       	breq	.+84     	; 0x1ea0 <DIO_u8GetPinValue+0x9c>
    1e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	91 05       	cpc	r25, r1
    1e54:	b9 f1       	breq	.+110    	; 0x1ec4 <DIO_u8GetPinValue+0xc0>
    1e56:	47 c0       	rjmp	.+142    	; 0x1ee6 <DIO_u8GetPinValue+0xe2>
        {
        case PORT_u8A:
            Local_u8PinState=GET_BIT(PINA,Copy_u8PinNum);
    1e58:	e9 e3       	ldi	r30, 0x39	; 57
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a9 01       	movw	r20, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <DIO_u8GetPinValue+0x6c>
    1e6c:	55 95       	asr	r21
    1e6e:	47 95       	ror	r20
    1e70:	8a 95       	dec	r24
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <DIO_u8GetPinValue+0x68>
    1e74:	ca 01       	movw	r24, r20
    1e76:	81 70       	andi	r24, 0x01	; 1
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	35 c0       	rjmp	.+106    	; 0x1ee6 <DIO_u8GetPinValue+0xe2>
            break;
        case PORT_u8B:
            Local_u8PinState=GET_BIT(PINB,Copy_u8PinNum);
    1e7c:	e6 e3       	ldi	r30, 0x36	; 54
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <DIO_u8GetPinValue+0x90>
    1e90:	55 95       	asr	r21
    1e92:	47 95       	ror	r20
    1e94:	8a 95       	dec	r24
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <DIO_u8GetPinValue+0x8c>
    1e98:	ca 01       	movw	r24, r20
    1e9a:	81 70       	andi	r24, 0x01	; 1
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	23 c0       	rjmp	.+70     	; 0x1ee6 <DIO_u8GetPinValue+0xe2>
            break;
        case PORT_u8C:
            Local_u8PinState=GET_BIT(PINC,Copy_u8PinNum);
    1ea0:	e3 e3       	ldi	r30, 0x33	; 51
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a9 01       	movw	r20, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <DIO_u8GetPinValue+0xb4>
    1eb4:	55 95       	asr	r21
    1eb6:	47 95       	ror	r20
    1eb8:	8a 95       	dec	r24
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <DIO_u8GetPinValue+0xb0>
    1ebc:	ca 01       	movw	r24, r20
    1ebe:	81 70       	andi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	11 c0       	rjmp	.+34     	; 0x1ee6 <DIO_u8GetPinValue+0xe2>
            break;
        case PORT_u8D:
            Local_u8PinState=GET_BIT(PIND,Copy_u8PinNum);
    1ec4:	e0 e3       	ldi	r30, 0x30	; 48
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a9 01       	movw	r20, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <DIO_u8GetPinValue+0xd8>
    1ed8:	55 95       	asr	r21
    1eda:	47 95       	ror	r20
    1edc:	8a 95       	dec	r24
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <DIO_u8GetPinValue+0xd4>
    1ee0:	ca 01       	movw	r24, r20
    1ee2:	81 70       	andi	r24, 0x01	; 1
    1ee4:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            break;
        }
    return Local_u8PinState;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortNum,u8 Copy_u8PinNum){
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <DIO_voidTogglePinValue+0x6>
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	6a 83       	std	Y+2, r22	; 0x02
    if(DIO_u8GetPinValue(Copy_u8PortNum,Copy_u8PinNum)==0){
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	6a 81       	ldd	r22, Y+2	; 0x02
    1f0a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_u8GetPinValue>
    1f0e:	88 23       	and	r24, r24
    1f10:	31 f4       	brne	.+12     	; 0x1f1e <DIO_voidTogglePinValue+0x26>
         DIO_voidSetPinValue(Copy_u8PortNum,Copy_u8PinNum,PIN_HIGH);
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	6a 81       	ldd	r22, Y+2	; 0x02
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
    1f1c:	0b c0       	rjmp	.+22     	; 0x1f34 <DIO_voidTogglePinValue+0x3c>
    }else if(DIO_u8GetPinValue(Copy_u8PortNum,Copy_u8PinNum)==1){
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	6a 81       	ldd	r22, Y+2	; 0x02
    1f22:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_u8GetPinValue>
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	29 f4       	brne	.+10     	; 0x1f34 <DIO_voidTogglePinValue+0x3c>
        DIO_voidSetPinValue(Copy_u8PortNum,Copy_u8PinNum,PIN_LOW);
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	6a 81       	ldd	r22, Y+2	; 0x02
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
    }
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue(u8 Copy_u8PortNum){
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <DIO_voidTogglePortValue+0x6>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	8a 83       	std	Y+2, r24	; 0x02
    for (u8 pin = 0; pin < 8; pin++) {
    1f4a:	19 82       	std	Y+1, r1	; 0x01
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <DIO_voidTogglePortValue+0x1e>
    	DIO_voidTogglePinValue(Copy_u8PortNum,pin);
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	69 81       	ldd	r22, Y+1	; 0x01
    1f52:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <DIO_voidTogglePinValue>
        DIO_voidSetPinValue(Copy_u8PortNum,Copy_u8PinNum,PIN_LOW);
    }
}

void DIO_voidTogglePortValue(u8 Copy_u8PortNum){
    for (u8 pin = 0; pin < 8; pin++) {
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	88 30       	cpi	r24, 0x08	; 8
    1f60:	b0 f3       	brcs	.-20     	; 0x1f4e <DIO_voidTogglePortValue+0x10>
    	DIO_voidTogglePinValue(Copy_u8PortNum,pin);
    }
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_private.h"
#include "KPD_config.h"
#include <util/delay.h>
void KPD_voidInit()
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	//COLUMSNS INPUT HIGH
	DIO_voidSetPinDirection(KPD_PORT,C1,PIN_IN);
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	63 e0       	ldi	r22, 0x03	; 3
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,C2,PIN_IN);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	62 e0       	ldi	r22, 0x02	; 2
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,C3,PIN_IN);
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,C4,PIN_IN);
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(KPD_PORT,C1,PIN_HIGH);
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	63 e0       	ldi	r22, 0x03	; 3
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,C2,PIN_HIGH);
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	62 e0       	ldi	r22, 0x02	; 2
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,C3,PIN_HIGH);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	61 e0       	ldi	r22, 0x01	; 1
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,C4,PIN_HIGH);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>

	//Rows OUTPUT pulled up
	DIO_voidSetPinDirection(KPD_PORT,R1,PIN_OUT);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	64 e0       	ldi	r22, 0x04	; 4
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,R2,PIN_OUT);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	65 e0       	ldi	r22, 0x05	; 5
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,R3,PIN_OUT);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	66 e0       	ldi	r22, 0x06	; 6
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,R4,PIN_OUT);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	67 e0       	ldi	r22, 0x07	; 7
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(KPD_PORT,R1,PIN_HIGH);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	64 e0       	ldi	r22, 0x04	; 4
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,R2,PIN_HIGH);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	65 e0       	ldi	r22, 0x05	; 5
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,R3,PIN_HIGH);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	66 e0       	ldi	r22, 0x06	; 6
    2004:	41 e0       	ldi	r20, 0x01	; 1
    2006:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,R4,PIN_HIGH);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	67 e0       	ldi	r22, 0x07	; 7
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>

}
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <KPD_u8GetKeyState>:
const u8 KPD_Au8keys[MAX_ROW_NUM][MAX_COL_NUM] = KPD_KEYS;

const u8 KPD_Au8RowsPins[MAX_ROW_NUM]={R1,R2,R3,R4};
const u8 KPD_Au8ColsPins[MAX_COL_NUM]={C1,C2,C3,C4}; 

u8 KPD_u8GetKeyState(){
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	63 97       	sbiw	r28, 0x13	; 19
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8Button=NO_PRESSED_KEY;
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	8b 8b       	std	Y+19, r24	; 0x13
    u8 LOCAl_u8RowsCounter,LOCAl_u8colCounter,Local_u8PinState , LOCAL_u8Flag=0;
    2032:	1f 86       	std	Y+15, r1	; 0x0f
       //Activate each row => FOR LOOP ON THE PINS OF THE ROWS
       for(LOCAl_u8RowsCounter=0;LOCAl_u8RowsCounter<MAX_ROW_NUM;LOCAl_u8RowsCounter++){
    2034:	1a 8a       	std	Y+18, r1	; 0x12
    2036:	da c0       	rjmp	.+436    	; 0x21ec <KPD_u8GetKeyState+0x1d2>

            DIO_voidSetPinValue(KPD_PORT,KPD_Au8RowsPins[LOCAl_u8RowsCounter],PIN_LOW);
    2038:	8a 89       	ldd	r24, Y+18	; 0x12
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	fc 01       	movw	r30, r24
    2040:	e6 57       	subi	r30, 0x76	; 118
    2042:	fe 4f       	sbci	r31, 0xFE	; 254
    2044:	90 81       	ld	r25, Z
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	69 2f       	mov	r22, r25
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
            //CHECK WHICH INPUT PIN HAS ZERO 
            for(LOCAl_u8colCounter=0 ;LOCAl_u8colCounter<MAX_COL_NUM;LOCAl_u8colCounter++){
    2050:	19 8a       	std	Y+17, r1	; 0x11
    2052:	b6 c0       	rjmp	.+364    	; 0x21c0 <KPD_u8GetKeyState+0x1a6>

                Local_u8PinState=DIO_u8GetPinValue(KPD_PORT,KPD_Au8ColsPins[LOCAl_u8colCounter]);
    2054:	89 89       	ldd	r24, Y+17	; 0x11
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	fc 01       	movw	r30, r24
    205c:	e2 57       	subi	r30, 0x72	; 114
    205e:	fe 4f       	sbci	r31, 0xFE	; 254
    2060:	90 81       	ld	r25, Z
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	69 2f       	mov	r22, r25
    2066:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_u8GetPinValue>
    206a:	88 8b       	std	Y+16, r24	; 0x10
                if(Local_u8PinState==PIN_LOW) //switch is pressed 
    206c:	88 89       	ldd	r24, Y+16	; 0x10
    206e:	88 23       	and	r24, r24
    2070:	09 f0       	breq	.+2      	; 0x2074 <KPD_u8GetKeyState+0x5a>
    2072:	a3 c0       	rjmp	.+326    	; 0x21ba <KPD_u8GetKeyState+0x1a0>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a8 e4       	ldi	r26, 0x48	; 72
    207a:	b2 e4       	ldi	r27, 0x42	; 66
    207c:	8b 87       	std	Y+11, r24	; 0x0b
    207e:	9c 87       	std	Y+12, r25	; 0x0c
    2080:	ad 87       	std	Y+13, r26	; 0x0d
    2082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	6b 85       	ldd	r22, Y+11	; 0x0b
    2086:	7c 85       	ldd	r23, Y+12	; 0x0c
    2088:	8d 85       	ldd	r24, Y+13	; 0x0d
    208a:	9e 85       	ldd	r25, Y+14	; 0x0e
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a ef       	ldi	r20, 0xFA	; 250
    2092:	54 e4       	ldi	r21, 0x44	; 68
    2094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8f 83       	std	Y+7, r24	; 0x07
    209e:	98 87       	std	Y+8, r25	; 0x08
    20a0:	a9 87       	std	Y+9, r26	; 0x09
    20a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <KPD_u8GetKeyState+0xac>
		__ticks = 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
    20c4:	3f c0       	rjmp	.+126    	; 0x2144 <KPD_u8GetKeyState+0x12a>
	else if (__tmp > 65535)
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3f ef       	ldi	r19, 0xFF	; 255
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    20da:	18 16       	cp	r1, r24
    20dc:	4c f5       	brge	.+82     	; 0x2130 <KPD_u8GetKeyState+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20de:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <KPD_u8GetKeyState+0x10c>
    2108:	88 ec       	ldi	r24, 0xC8	; 200
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <KPD_u8GetKeyState+0xfa>
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	9e 81       	ldd	r25, Y+6	; 0x06
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	69 f7       	brne	.-38     	; 0x2108 <KPD_u8GetKeyState+0xee>
    212e:	14 c0       	rjmp	.+40     	; 0x2158 <KPD_u8GetKeyState+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	6f 81       	ldd	r22, Y+7	; 0x07
    2132:	78 85       	ldd	r23, Y+8	; 0x08
    2134:	89 85       	ldd	r24, Y+9	; 0x09
    2136:	9a 85       	ldd	r25, Y+10	; 0x0a
    2138:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	9a 81       	ldd	r25, Y+2	; 0x02
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <KPD_u8GetKeyState+0x136>
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
                {
                    //Debouncing 
                    _delay_ms(50); //leh mafish delay ba3d ma awsal lel nos 3ashan mat2asarsh bel bouncing bta3 el rego3
                    Local_u8PinState=DIO_u8GetPinValue(KPD_PORT,KPD_Au8ColsPins[LOCAl_u8colCounter]);
    2158:	89 89       	ldd	r24, Y+17	; 0x11
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	fc 01       	movw	r30, r24
    2160:	e2 57       	subi	r30, 0x72	; 114
    2162:	fe 4f       	sbci	r31, 0xFE	; 254
    2164:	90 81       	ld	r25, Z
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	69 2f       	mov	r22, r25
    216a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_u8GetPinValue>
    216e:	88 8b       	std	Y+16, r24	; 0x10
    2170:	0c c0       	rjmp	.+24     	; 0x218a <KPD_u8GetKeyState+0x170>
                    //Check if the pin still low 
                    while(Local_u8PinState == PIN_LOW){
                        Local_u8PinState=DIO_u8GetPinValue(KPD_PORT,KPD_Au8ColsPins[LOCAl_u8colCounter]);
    2172:	89 89       	ldd	r24, Y+17	; 0x11
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	fc 01       	movw	r30, r24
    217a:	e2 57       	subi	r30, 0x72	; 114
    217c:	fe 4f       	sbci	r31, 0xFE	; 254
    217e:	90 81       	ld	r25, Z
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	69 2f       	mov	r22, r25
    2184:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_u8GetPinValue>
    2188:	88 8b       	std	Y+16, r24	; 0x10
                {
                    //Debouncing 
                    _delay_ms(50); //leh mafish delay ba3d ma awsal lel nos 3ashan mat2asarsh bel bouncing bta3 el rego3
                    Local_u8PinState=DIO_u8GetPinValue(KPD_PORT,KPD_Au8ColsPins[LOCAl_u8colCounter]);
                    //Check if the pin still low 
                    while(Local_u8PinState == PIN_LOW){
    218a:	88 89       	ldd	r24, Y+16	; 0x10
    218c:	88 23       	and	r24, r24
    218e:	89 f3       	breq	.-30     	; 0x2172 <KPD_u8GetKeyState+0x158>
                        Local_u8PinState=DIO_u8GetPinValue(KPD_PORT,KPD_Au8ColsPins[LOCAl_u8colCounter]);
                    }
                    Local_u8Button=KPD_Au8keys[LOCAl_u8RowsCounter][LOCAl_u8colCounter];
    2190:	8a 89       	ldd	r24, Y+18	; 0x12
    2192:	48 2f       	mov	r20, r24
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	ca 01       	movw	r24, r20
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	82 0f       	add	r24, r18
    21a8:	93 1f       	adc	r25, r19
    21aa:	fc 01       	movw	r30, r24
    21ac:	e6 58       	subi	r30, 0x86	; 134
    21ae:	fe 4f       	sbci	r31, 0xFE	; 254
    21b0:	80 81       	ld	r24, Z
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
                    LOCAL_u8Flag=1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	8f 87       	std	Y+15, r24	; 0x0f
    21b8:	07 c0       	rjmp	.+14     	; 0x21c8 <KPD_u8GetKeyState+0x1ae>
       //Activate each row => FOR LOOP ON THE PINS OF THE ROWS
       for(LOCAl_u8RowsCounter=0;LOCAl_u8RowsCounter<MAX_ROW_NUM;LOCAl_u8RowsCounter++){

            DIO_voidSetPinValue(KPD_PORT,KPD_Au8RowsPins[LOCAl_u8RowsCounter],PIN_LOW);
            //CHECK WHICH INPUT PIN HAS ZERO 
            for(LOCAl_u8colCounter=0 ;LOCAl_u8colCounter<MAX_COL_NUM;LOCAl_u8colCounter++){
    21ba:	89 89       	ldd	r24, Y+17	; 0x11
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	89 8b       	std	Y+17, r24	; 0x11
    21c0:	89 89       	ldd	r24, Y+17	; 0x11
    21c2:	84 30       	cpi	r24, 0x04	; 4
    21c4:	08 f4       	brcc	.+2      	; 0x21c8 <KPD_u8GetKeyState+0x1ae>
    21c6:	46 cf       	rjmp	.-372    	; 0x2054 <KPD_u8GetKeyState+0x3a>
                    LOCAL_u8Flag=1;
                    break;
                }
            }
        //Deactivate the activated row
        DIO_voidSetPinValue(KPD_PORT,KPD_Au8RowsPins[LOCAl_u8RowsCounter],PIN_HIGH);
    21c8:	8a 89       	ldd	r24, Y+18	; 0x12
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	fc 01       	movw	r30, r24
    21d0:	e6 57       	subi	r30, 0x76	; 118
    21d2:	fe 4f       	sbci	r31, 0xFE	; 254
    21d4:	90 81       	ld	r25, Z
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	69 2f       	mov	r22, r25
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <DIO_voidSetPinValue>
        //Terminate the outer loop only when a button is pressed
        if(LOCAL_u8Flag==1) break;
    21e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	39 f0       	breq	.+14     	; 0x21f4 <KPD_u8GetKeyState+0x1da>

u8 KPD_u8GetKeyState(){
    u8 Local_u8Button=NO_PRESSED_KEY;
    u8 LOCAl_u8RowsCounter,LOCAl_u8colCounter,Local_u8PinState , LOCAL_u8Flag=0;
       //Activate each row => FOR LOOP ON THE PINS OF THE ROWS
       for(LOCAl_u8RowsCounter=0;LOCAl_u8RowsCounter<MAX_ROW_NUM;LOCAl_u8RowsCounter++){
    21e6:	8a 89       	ldd	r24, Y+18	; 0x12
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	8a 8b       	std	Y+18, r24	; 0x12
    21ec:	8a 89       	ldd	r24, Y+18	; 0x12
    21ee:	84 30       	cpi	r24, 0x04	; 4
    21f0:	08 f4       	brcc	.+2      	; 0x21f4 <KPD_u8GetKeyState+0x1da>
    21f2:	22 cf       	rjmp	.-444    	; 0x2038 <KPD_u8GetKeyState+0x1e>
        //Deactivate the activated row
        DIO_voidSetPinValue(KPD_PORT,KPD_Au8RowsPins[LOCAl_u8RowsCounter],PIN_HIGH);
        //Terminate the outer loop only when a button is pressed
        if(LOCAL_u8Flag==1) break;
       }
    return Local_u8Button;
    21f4:	8b 89       	ldd	r24, Y+19	; 0x13
}
    21f6:	63 96       	adiw	r28, 0x13	; 19
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <main>:
#include <util/delay.h>
#include "DIO_interface.h"
#include "CLCD_interface.h"
#include "KPD_interface.h"

void main(){
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	c4 55       	subi	r28, 0x54	; 84
    2216:	d0 40       	sbci	r29, 0x00	; 0
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
	KPD_voidInit();
    2222:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <KPD_voidInit>
	CLCD_voidInit();
    2226:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidInit>
	CLCD_voidClearDisplay();
    222a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <CLCD_voidClearDisplay>
	while(1){
		CLCD_voidSetPosition(0,0);
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	0e 94 29 0b 	call	0x1652	; 0x1652 <CLCD_voidSetPosition>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a0 e8       	ldi	r26, 0x80	; 128
    223c:	bf e3       	ldi	r27, 0x3F	; 63
    223e:	89 8f       	std	Y+25, r24	; 0x19
    2240:	9a 8f       	std	Y+26, r25	; 0x1a
    2242:	ab 8f       	std	Y+27, r26	; 0x1b
    2244:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	69 8d       	ldd	r22, Y+25	; 0x19
    2248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a ef       	ldi	r20, 0xFA	; 250
    2254:	54 e4       	ldi	r21, 0x44	; 68
    2256:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8d 8b       	std	Y+21, r24	; 0x15
    2260:	9e 8b       	std	Y+22, r25	; 0x16
    2262:	af 8b       	std	Y+23, r26	; 0x17
    2264:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2266:	6d 89       	ldd	r22, Y+21	; 0x15
    2268:	7e 89       	ldd	r23, Y+22	; 0x16
    226a:	8f 89       	ldd	r24, Y+23	; 0x17
    226c:	98 8d       	ldd	r25, Y+24	; 0x18
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    227a:	88 23       	and	r24, r24
    227c:	2c f4       	brge	.+10     	; 0x2288 <main+0x80>
		__ticks = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	9c 8b       	std	Y+20, r25	; 0x14
    2284:	8b 8b       	std	Y+19, r24	; 0x13
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <main+0xfe>
	else if (__tmp > 65535)
    2288:	6d 89       	ldd	r22, Y+21	; 0x15
    228a:	7e 89       	ldd	r23, Y+22	; 0x16
    228c:	8f 89       	ldd	r24, Y+23	; 0x17
    228e:	98 8d       	ldd	r25, Y+24	; 0x18
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	3f ef       	ldi	r19, 0xFF	; 255
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	57 e4       	ldi	r21, 0x47	; 71
    2298:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    229c:	18 16       	cp	r1, r24
    229e:	4c f5       	brge	.+82     	; 0x22f2 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a0:	69 8d       	ldd	r22, Y+25	; 0x19
    22a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	51 e4       	ldi	r21, 0x41	; 65
    22b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9c 8b       	std	Y+20, r25	; 0x14
    22c6:	8b 8b       	std	Y+19, r24	; 0x13
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <main+0xe0>
    22ca:	88 ec       	ldi	r24, 0xC8	; 200
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9a 8b       	std	Y+18, r25	; 0x12
    22d0:	89 8b       	std	Y+17, r24	; 0x11
    22d2:	89 89       	ldd	r24, Y+17	; 0x11
    22d4:	9a 89       	ldd	r25, Y+18	; 0x12
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <main+0xce>
    22da:	9a 8b       	std	Y+18, r25	; 0x12
    22dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	9c 8b       	std	Y+20, r25	; 0x14
    22e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ea:	9c 89       	ldd	r25, Y+20	; 0x14
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	69 f7       	brne	.-38     	; 0x22ca <main+0xc2>
    22f0:	14 c0       	rjmp	.+40     	; 0x231a <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f2:	6d 89       	ldd	r22, Y+21	; 0x15
    22f4:	7e 89       	ldd	r23, Y+22	; 0x16
    22f6:	8f 89       	ldd	r24, Y+23	; 0x17
    22f8:	98 8d       	ldd	r25, Y+24	; 0x18
    22fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9c 8b       	std	Y+20, r25	; 0x14
    2304:	8b 8b       	std	Y+19, r24	; 0x13
    2306:	8b 89       	ldd	r24, Y+19	; 0x13
    2308:	9c 89       	ldd	r25, Y+20	; 0x14
    230a:	98 8b       	std	Y+16, r25	; 0x10
    230c:	8f 87       	std	Y+15, r24	; 0x0f
    230e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2310:	98 89       	ldd	r25, Y+16	; 0x10
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <main+0x10a>
    2316:	98 8b       	std	Y+16, r25	; 0x10
    2318:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		f32 Copy_u8InputFromKPD1=0xff,Copy_u8InputFromKPD2=0xff;
    231a:	fe 01       	movw	r30, r28
    231c:	ee 5b       	subi	r30, 0xBE	; 190
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	af e7       	ldi	r26, 0x7F	; 127
    2326:	b3 e4       	ldi	r27, 0x43	; 67
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
    2330:	fe 01       	movw	r30, r28
    2332:	fe 96       	adiw	r30, 0x3e	; 62
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	af e7       	ldi	r26, 0x7F	; 127
    233a:	b3 e4       	ldi	r27, 0x43	; 67
    233c:	80 83       	st	Z, r24
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	a2 83       	std	Z+2, r26	; 0x02
    2342:	b3 83       	std	Z+3, r27	; 0x03
		f32 OP1_f32=0 ,OP2_f32=0;
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e0       	ldi	r26, 0x00	; 0
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	8a af       	std	Y+58, r24	; 0x3a
    234e:	9b af       	std	Y+59, r25	; 0x3b
    2350:	ac af       	std	Y+60, r26	; 0x3c
    2352:	bd af       	std	Y+61, r27	; 0x3d
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e0       	ldi	r26, 0x00	; 0
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	8e ab       	std	Y+54, r24	; 0x36
    235e:	9f ab       	std	Y+55, r25	; 0x37
    2360:	a8 af       	std	Y+56, r26	; 0x38
    2362:	b9 af       	std	Y+57, r27	; 0x39
		u8 floatflag1_u8=0,floatflag2_u8=0;
    2364:	1d aa       	std	Y+53, r1	; 0x35
    2366:	1c aa       	std	Y+52, r1	; 0x34
		u8 operation_u8;
		f32 Fac1_f32=10,Fac2_f32=10;
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a0 e2       	ldi	r26, 0x20	; 32
    236e:	b1 e4       	ldi	r27, 0x41	; 65
    2370:	8f a7       	std	Y+47, r24	; 0x2f
    2372:	98 ab       	std	Y+48, r25	; 0x30
    2374:	a9 ab       	std	Y+49, r26	; 0x31
    2376:	ba ab       	std	Y+50, r27	; 0x32
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e2       	ldi	r26, 0x20	; 32
    237e:	b1 e4       	ldi	r27, 0x41	; 65
    2380:	8b a7       	std	Y+43, r24	; 0x2b
    2382:	9c a7       	std	Y+44, r25	; 0x2c
    2384:	ad a7       	std	Y+45, r26	; 0x2d
    2386:	be a7       	std	Y+46, r27	; 0x2e
		f64 result_f64=0;
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e0       	ldi	r26, 0x00	; 0
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	8f a3       	std	Y+39, r24	; 0x27
    2392:	98 a7       	std	Y+40, r25	; 0x28
    2394:	a9 a7       	std	Y+41, r26	; 0x29
    2396:	ba a7       	std	Y+42, r27	; 0x2a
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <main+0x1ba>
		//getting operand 1
		//waiting for the user to enter value
		while(Copy_u8InputFromKPD1==0xff)		Copy_u8InputFromKPD1=KPD_u8GetKeyState();
    239a:	0e 94 0d 10 	call	0x201a	; 0x201a <KPD_u8GetKeyState>
    239e:	8e 01       	movw	r16, r28
    23a0:	0e 5b       	subi	r16, 0xBE	; 190
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	88 2f       	mov	r24, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a0 e0       	ldi	r26, 0x00	; 0
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	f8 01       	movw	r30, r16
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
    23c2:	fe 01       	movw	r30, r28
    23c4:	ee 5b       	subi	r30, 0xBE	; 190
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	53 e4       	ldi	r21, 0x43	; 67
    23d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    23dc:	88 23       	and	r24, r24
    23de:	e9 f2       	breq	.-70     	; 0x239a <main+0x192>
    23e0:	f7 c0       	rjmp	.+494    	; 0x25d0 <main+0x3c8>
		//saving the user value in op1
		while(Copy_u8InputFromKPD1 != '+' && Copy_u8InputFromKPD1 != '-' && Copy_u8InputFromKPD1 != '*' && Copy_u8InputFromKPD1 != '=' && Copy_u8InputFromKPD1 != '/' && Copy_u8InputFromKPD1 != 0xff  )
		{
			if(Copy_u8InputFromKPD1=='.'){
    23e2:	fe 01       	movw	r30, r28
    23e4:	ee 5b       	subi	r30, 0xBE	; 190
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	60 81       	ld	r22, Z
    23ea:	71 81       	ldd	r23, Z+1	; 0x01
    23ec:	82 81       	ldd	r24, Z+2	; 0x02
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	48 e3       	ldi	r20, 0x38	; 56
    23f6:	52 e4       	ldi	r21, 0x42	; 66
    23f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	09 f0       	breq	.+2      	; 0x2402 <main+0x1fa>
    2400:	3e c0       	rjmp	.+124    	; 0x247e <main+0x276>
				CLCD_voidSendString(".");
    2402:	80 e6       	ldi	r24, 0x60	; 96
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
				floatflag1_u8=1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	8d ab       	std	Y+53, r24	; 0x35
				Fac1_f32=0.1;
    240e:	8d ec       	ldi	r24, 0xCD	; 205
    2410:	9c ec       	ldi	r25, 0xCC	; 204
    2412:	ac ec       	ldi	r26, 0xCC	; 204
    2414:	bd e3       	ldi	r27, 0x3D	; 61
    2416:	8f a7       	std	Y+47, r24	; 0x2f
    2418:	98 ab       	std	Y+48, r25	; 0x30
    241a:	a9 ab       	std	Y+49, r26	; 0x31
    241c:	ba ab       	std	Y+50, r27	; 0x32
				Copy_u8InputFromKPD1=0xff;
    241e:	fe 01       	movw	r30, r28
    2420:	ee 5b       	subi	r30, 0xBE	; 190
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	af e7       	ldi	r26, 0x7F	; 127
    242a:	b3 e4       	ldi	r27, 0x43	; 67
    242c:	80 83       	st	Z, r24
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	a2 83       	std	Z+2, r26	; 0x02
    2432:	b3 83       	std	Z+3, r27	; 0x03
    2434:	14 c0       	rjmp	.+40     	; 0x245e <main+0x256>
				//waiting for the user to enter value
				while(Copy_u8InputFromKPD1==0xff)		Copy_u8InputFromKPD1=KPD_u8GetKeyState();
    2436:	0e 94 0d 10 	call	0x201a	; 0x201a <KPD_u8GetKeyState>
    243a:	8e 01       	movw	r16, r28
    243c:	0e 5b       	subi	r16, 0xBE	; 190
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a0 e0       	ldi	r26, 0x00	; 0
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	f8 01       	movw	r30, r16
    2456:	80 83       	st	Z, r24
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	a2 83       	std	Z+2, r26	; 0x02
    245c:	b3 83       	std	Z+3, r27	; 0x03
    245e:	fe 01       	movw	r30, r28
    2460:	ee 5b       	subi	r30, 0xBE	; 190
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	60 81       	ld	r22, Z
    2466:	71 81       	ldd	r23, Z+1	; 0x01
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	53 e4       	ldi	r21, 0x43	; 67
    2474:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2478:	88 23       	and	r24, r24
    247a:	e9 f2       	breq	.-70     	; 0x2436 <main+0x22e>
    247c:	a9 c0       	rjmp	.+338    	; 0x25d0 <main+0x3c8>
				continue;
			}
			CLCD_voidSendNum(Copy_u8InputFromKPD1);
    247e:	fe 01       	movw	r30, r28
    2480:	ee 5b       	subi	r30, 0xBE	; 190
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	0e 94 9e 0b 	call	0x173c	; 0x173c <CLCD_voidSendNum>
			if(floatflag1_u8){
    2498:	8d a9       	ldd	r24, Y+53	; 0x35
    249a:	88 23       	and	r24, r24
    249c:	d9 f1       	breq	.+118    	; 0x2514 <main+0x30c>
				Copy_u8InputFromKPD1 *= Fac1_f32;
    249e:	8e 01       	movw	r16, r28
    24a0:	0e 5b       	subi	r16, 0xBE	; 190
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	ee 5b       	subi	r30, 0xBE	; 190
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	2f a5       	ldd	r18, Y+47	; 0x2f
    24b4:	38 a9       	ldd	r19, Y+48	; 0x30
    24b6:	49 a9       	ldd	r20, Y+49	; 0x31
    24b8:	5a a9       	ldd	r21, Y+50	; 0x32
    24ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	f8 01       	movw	r30, r16
    24c4:	80 83       	st	Z, r24
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	a2 83       	std	Z+2, r26	; 0x02
    24ca:	b3 83       	std	Z+3, r27	; 0x03
				OP1_f32 += Copy_u8InputFromKPD1;
    24cc:	fe 01       	movw	r30, r28
    24ce:	ee 5b       	subi	r30, 0xBE	; 190
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	6a ad       	ldd	r22, Y+58	; 0x3a
    24d4:	7b ad       	ldd	r23, Y+59	; 0x3b
    24d6:	8c ad       	ldd	r24, Y+60	; 0x3c
    24d8:	9d ad       	ldd	r25, Y+61	; 0x3d
    24da:	20 81       	ld	r18, Z
    24dc:	31 81       	ldd	r19, Z+1	; 0x01
    24de:	42 81       	ldd	r20, Z+2	; 0x02
    24e0:	53 81       	ldd	r21, Z+3	; 0x03
    24e2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8a af       	std	Y+58, r24	; 0x3a
    24ec:	9b af       	std	Y+59, r25	; 0x3b
    24ee:	ac af       	std	Y+60, r26	; 0x3c
    24f0:	bd af       	std	Y+61, r27	; 0x3d
				Fac1_f32 *= 0.1;
    24f2:	6f a5       	ldd	r22, Y+47	; 0x2f
    24f4:	78 a9       	ldd	r23, Y+48	; 0x30
    24f6:	89 a9       	ldd	r24, Y+49	; 0x31
    24f8:	9a a9       	ldd	r25, Y+50	; 0x32
    24fa:	2d ec       	ldi	r18, 0xCD	; 205
    24fc:	3c ec       	ldi	r19, 0xCC	; 204
    24fe:	4c ec       	ldi	r20, 0xCC	; 204
    2500:	5d e3       	ldi	r21, 0x3D	; 61
    2502:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	8f a7       	std	Y+47, r24	; 0x2f
    250c:	98 ab       	std	Y+48, r25	; 0x30
    250e:	a9 ab       	std	Y+49, r26	; 0x31
    2510:	ba ab       	std	Y+50, r27	; 0x32
    2512:	23 c0       	rjmp	.+70     	; 0x255a <main+0x352>
			}
			else{
				OP1_f32 *= Fac1_f32;
    2514:	6a ad       	ldd	r22, Y+58	; 0x3a
    2516:	7b ad       	ldd	r23, Y+59	; 0x3b
    2518:	8c ad       	ldd	r24, Y+60	; 0x3c
    251a:	9d ad       	ldd	r25, Y+61	; 0x3d
    251c:	2f a5       	ldd	r18, Y+47	; 0x2f
    251e:	38 a9       	ldd	r19, Y+48	; 0x30
    2520:	49 a9       	ldd	r20, Y+49	; 0x31
    2522:	5a a9       	ldd	r21, Y+50	; 0x32
    2524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8a af       	std	Y+58, r24	; 0x3a
    252e:	9b af       	std	Y+59, r25	; 0x3b
    2530:	ac af       	std	Y+60, r26	; 0x3c
    2532:	bd af       	std	Y+61, r27	; 0x3d
				OP1_f32 += Copy_u8InputFromKPD1;
    2534:	fe 01       	movw	r30, r28
    2536:	ee 5b       	subi	r30, 0xBE	; 190
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	6a ad       	ldd	r22, Y+58	; 0x3a
    253c:	7b ad       	ldd	r23, Y+59	; 0x3b
    253e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2540:	9d ad       	ldd	r25, Y+61	; 0x3d
    2542:	20 81       	ld	r18, Z
    2544:	31 81       	ldd	r19, Z+1	; 0x01
    2546:	42 81       	ldd	r20, Z+2	; 0x02
    2548:	53 81       	ldd	r21, Z+3	; 0x03
    254a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8a af       	std	Y+58, r24	; 0x3a
    2554:	9b af       	std	Y+59, r25	; 0x3b
    2556:	ac af       	std	Y+60, r26	; 0x3c
    2558:	bd af       	std	Y+61, r27	; 0x3d
			}
			Copy_u8InputFromKPD1=0xff;
    255a:	fe 01       	movw	r30, r28
    255c:	ee 5b       	subi	r30, 0xBE	; 190
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	af e7       	ldi	r26, 0x7F	; 127
    2566:	b3 e4       	ldi	r27, 0x43	; 67
    2568:	80 83       	st	Z, r24
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	a2 83       	std	Z+2, r26	; 0x02
    256e:	b3 83       	std	Z+3, r27	; 0x03
    2570:	14 c0       	rjmp	.+40     	; 0x259a <main+0x392>
			//waiting for the user to enter value
			while(Copy_u8InputFromKPD1==0xff)		Copy_u8InputFromKPD1=KPD_u8GetKeyState();
    2572:	0e 94 0d 10 	call	0x201a	; 0x201a <KPD_u8GetKeyState>
    2576:	8e 01       	movw	r16, r28
    2578:	0e 5b       	subi	r16, 0xBE	; 190
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	a0 e0       	ldi	r26, 0x00	; 0
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	f8 01       	movw	r30, r16
    2592:	80 83       	st	Z, r24
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	a2 83       	std	Z+2, r26	; 0x02
    2598:	b3 83       	std	Z+3, r27	; 0x03
    259a:	fe 01       	movw	r30, r28
    259c:	ee 5b       	subi	r30, 0xBE	; 190
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	60 81       	ld	r22, Z
    25a2:	71 81       	ldd	r23, Z+1	; 0x01
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	4f e7       	ldi	r20, 0x7F	; 127
    25ae:	53 e4       	ldi	r21, 0x43	; 67
    25b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    25b4:	88 23       	and	r24, r24
    25b6:	e9 f2       	breq	.-70     	; 0x2572 <main+0x36a>
			//saving the operation
			operation_u8=Copy_u8InputFromKPD1;
    25b8:	fe 01       	movw	r30, r28
    25ba:	ee 5b       	subi	r30, 0xBE	; 190
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8b ab       	std	Y+51, r24	; 0x33
		f64 result_f64=0;
		//getting operand 1
		//waiting for the user to enter value
		while(Copy_u8InputFromKPD1==0xff)		Copy_u8InputFromKPD1=KPD_u8GetKeyState();
		//saving the user value in op1
		while(Copy_u8InputFromKPD1 != '+' && Copy_u8InputFromKPD1 != '-' && Copy_u8InputFromKPD1 != '*' && Copy_u8InputFromKPD1 != '=' && Copy_u8InputFromKPD1 != '/' && Copy_u8InputFromKPD1 != 0xff  )
    25d0:	65 96       	adiw	r28, 0x15	; 21
    25d2:	1f ae       	std	Y+63, r1	; 0x3f
    25d4:	65 97       	sbiw	r28, 0x15	; 21
    25d6:	fe 01       	movw	r30, r28
    25d8:	ee 5b       	subi	r30, 0xBE	; 190
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	93 81       	ldd	r25, Z+3	; 0x03
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	4c e2       	ldi	r20, 0x2C	; 44
    25ea:	52 e4       	ldi	r21, 0x42	; 66
    25ec:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    25f0:	88 23       	and	r24, r24
    25f2:	21 f0       	breq	.+8      	; 0x25fc <main+0x3f4>
    25f4:	f1 e0       	ldi	r31, 0x01	; 1
    25f6:	65 96       	adiw	r28, 0x15	; 21
    25f8:	ff af       	std	Y+63, r31	; 0x3f
    25fa:	65 97       	sbiw	r28, 0x15	; 21
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	65 96       	adiw	r28, 0x15	; 21
    2600:	2f ad       	ldd	r18, Y+63	; 0x3f
    2602:	65 97       	sbiw	r28, 0x15	; 21
    2604:	82 27       	eor	r24, r18
    2606:	88 23       	and	r24, r24
    2608:	09 f0       	breq	.+2      	; 0x260c <main+0x404>
    260a:	86 c0       	rjmp	.+268    	; 0x2718 <main+0x510>
    260c:	64 96       	adiw	r28, 0x14	; 20
    260e:	1f ae       	std	Y+63, r1	; 0x3f
    2610:	64 97       	sbiw	r28, 0x14	; 20
    2612:	fe 01       	movw	r30, r28
    2614:	ee 5b       	subi	r30, 0xBE	; 190
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	44 e3       	ldi	r20, 0x34	; 52
    2626:	52 e4       	ldi	r21, 0x42	; 66
    2628:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    262c:	88 23       	and	r24, r24
    262e:	21 f0       	breq	.+8      	; 0x2638 <main+0x430>
    2630:	31 e0       	ldi	r19, 0x01	; 1
    2632:	64 96       	adiw	r28, 0x14	; 20
    2634:	3f af       	std	Y+63, r19	; 0x3f
    2636:	64 97       	sbiw	r28, 0x14	; 20
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	64 96       	adiw	r28, 0x14	; 20
    263c:	9f ad       	ldd	r25, Y+63	; 0x3f
    263e:	64 97       	sbiw	r28, 0x14	; 20
    2640:	89 27       	eor	r24, r25
    2642:	88 23       	and	r24, r24
    2644:	09 f0       	breq	.+2      	; 0x2648 <main+0x440>
    2646:	68 c0       	rjmp	.+208    	; 0x2718 <main+0x510>
    2648:	63 96       	adiw	r28, 0x13	; 19
    264a:	1f ae       	std	Y+63, r1	; 0x3f
    264c:	63 97       	sbiw	r28, 0x13	; 19
    264e:	fe 01       	movw	r30, r28
    2650:	ee 5b       	subi	r30, 0xBE	; 190
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	48 e2       	ldi	r20, 0x28	; 40
    2662:	52 e4       	ldi	r21, 0x42	; 66
    2664:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2668:	88 23       	and	r24, r24
    266a:	21 f0       	breq	.+8      	; 0x2674 <main+0x46c>
    266c:	e1 e0       	ldi	r30, 0x01	; 1
    266e:	63 96       	adiw	r28, 0x13	; 19
    2670:	ef af       	std	Y+63, r30	; 0x3f
    2672:	63 97       	sbiw	r28, 0x13	; 19
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	63 96       	adiw	r28, 0x13	; 19
    2678:	ff ad       	ldd	r31, Y+63	; 0x3f
    267a:	63 97       	sbiw	r28, 0x13	; 19
    267c:	8f 27       	eor	r24, r31
    267e:	88 23       	and	r24, r24
    2680:	09 f0       	breq	.+2      	; 0x2684 <main+0x47c>
    2682:	4a c0       	rjmp	.+148    	; 0x2718 <main+0x510>
    2684:	62 96       	adiw	r28, 0x12	; 18
    2686:	1f ae       	std	Y+63, r1	; 0x3f
    2688:	62 97       	sbiw	r28, 0x12	; 18
    268a:	fe 01       	movw	r30, r28
    268c:	ee 5b       	subi	r30, 0xBE	; 190
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	44 e7       	ldi	r20, 0x74	; 116
    269e:	52 e4       	ldi	r21, 0x42	; 66
    26a0:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    26a4:	88 23       	and	r24, r24
    26a6:	21 f0       	breq	.+8      	; 0x26b0 <main+0x4a8>
    26a8:	21 e0       	ldi	r18, 0x01	; 1
    26aa:	62 96       	adiw	r28, 0x12	; 18
    26ac:	2f af       	std	Y+63, r18	; 0x3f
    26ae:	62 97       	sbiw	r28, 0x12	; 18
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	62 96       	adiw	r28, 0x12	; 18
    26b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    26b6:	62 97       	sbiw	r28, 0x12	; 18
    26b8:	83 27       	eor	r24, r19
    26ba:	88 23       	and	r24, r24
    26bc:	69 f5       	brne	.+90     	; 0x2718 <main+0x510>
    26be:	61 96       	adiw	r28, 0x11	; 17
    26c0:	1f ae       	std	Y+63, r1	; 0x3f
    26c2:	61 97       	sbiw	r28, 0x11	; 17
    26c4:	fe 01       	movw	r30, r28
    26c6:	ee 5b       	subi	r30, 0xBE	; 190
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	4c e3       	ldi	r20, 0x3C	; 60
    26d8:	52 e4       	ldi	r21, 0x42	; 66
    26da:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    26de:	88 23       	and	r24, r24
    26e0:	21 f0       	breq	.+8      	; 0x26ea <main+0x4e2>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	61 96       	adiw	r28, 0x11	; 17
    26e6:	8f af       	std	Y+63, r24	; 0x3f
    26e8:	61 97       	sbiw	r28, 0x11	; 17
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	61 96       	adiw	r28, 0x11	; 17
    26ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    26f0:	61 97       	sbiw	r28, 0x11	; 17
    26f2:	89 27       	eor	r24, r25
    26f4:	88 23       	and	r24, r24
    26f6:	81 f4       	brne	.+32     	; 0x2718 <main+0x510>
    26f8:	fe 01       	movw	r30, r28
    26fa:	ee 5b       	subi	r30, 0xBE	; 190
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	53 e4       	ldi	r21, 0x43	; 67
    270e:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2712:	88 23       	and	r24, r24
    2714:	09 f0       	breq	.+2      	; 0x2718 <main+0x510>
    2716:	65 ce       	rjmp	.-822    	; 0x23e2 <main+0x1da>
			//saving the operation
			operation_u8=Copy_u8InputFromKPD1;
		}


				switch (operation_u8)
    2718:	8b a9       	ldd	r24, Y+51	; 0x33
    271a:	e8 2f       	mov	r30, r24
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	60 96       	adiw	r28, 0x10	; 16
    2720:	ff af       	std	Y+63, r31	; 0x3f
    2722:	ee af       	std	Y+62, r30	; 0x3e
    2724:	60 97       	sbiw	r28, 0x10	; 16
    2726:	60 96       	adiw	r28, 0x10	; 16
    2728:	2e ad       	ldd	r18, Y+62	; 0x3e
    272a:	3f ad       	ldd	r19, Y+63	; 0x3f
    272c:	60 97       	sbiw	r28, 0x10	; 16
    272e:	2b 32       	cpi	r18, 0x2B	; 43
    2730:	31 05       	cpc	r19, r1
    2732:	f1 f0       	breq	.+60     	; 0x2770 <main+0x568>
    2734:	60 96       	adiw	r28, 0x10	; 16
    2736:	8e ad       	ldd	r24, Y+62	; 0x3e
    2738:	9f ad       	ldd	r25, Y+63	; 0x3f
    273a:	60 97       	sbiw	r28, 0x10	; 16
    273c:	8c 32       	cpi	r24, 0x2C	; 44
    273e:	91 05       	cpc	r25, r1
    2740:	44 f4       	brge	.+16     	; 0x2752 <main+0x54a>
    2742:	60 96       	adiw	r28, 0x10	; 16
    2744:	ee ad       	ldd	r30, Y+62	; 0x3e
    2746:	ff ad       	ldd	r31, Y+63	; 0x3f
    2748:	60 97       	sbiw	r28, 0x10	; 16
    274a:	ea 32       	cpi	r30, 0x2A	; 42
    274c:	f1 05       	cpc	r31, r1
    274e:	d1 f0       	breq	.+52     	; 0x2784 <main+0x57c>
    2750:	23 c0       	rjmp	.+70     	; 0x2798 <main+0x590>
    2752:	60 96       	adiw	r28, 0x10	; 16
    2754:	2e ad       	ldd	r18, Y+62	; 0x3e
    2756:	3f ad       	ldd	r19, Y+63	; 0x3f
    2758:	60 97       	sbiw	r28, 0x10	; 16
    275a:	2d 32       	cpi	r18, 0x2D	; 45
    275c:	31 05       	cpc	r19, r1
    275e:	69 f0       	breq	.+26     	; 0x277a <main+0x572>
    2760:	60 96       	adiw	r28, 0x10	; 16
    2762:	8e ad       	ldd	r24, Y+62	; 0x3e
    2764:	9f ad       	ldd	r25, Y+63	; 0x3f
    2766:	60 97       	sbiw	r28, 0x10	; 16
    2768:	8f 32       	cpi	r24, 0x2F	; 47
    276a:	91 05       	cpc	r25, r1
    276c:	81 f0       	breq	.+32     	; 0x278e <main+0x586>
    276e:	14 c0       	rjmp	.+40     	; 0x2798 <main+0x590>
				{
				case '+':
					CLCD_voidSendString("+");
    2770:	82 e6       	ldi	r24, 0x62	; 98
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
    2778:	28 c0       	rjmp	.+80     	; 0x27ca <main+0x5c2>
					break;
				case '-':
					CLCD_voidSendString("-");
    277a:	84 e6       	ldi	r24, 0x64	; 100
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
    2782:	23 c0       	rjmp	.+70     	; 0x27ca <main+0x5c2>
					break;
				case '*':
					CLCD_voidSendString("*");
    2784:	86 e6       	ldi	r24, 0x66	; 102
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
    278c:	1e c0       	rjmp	.+60     	; 0x27ca <main+0x5c2>
					break;
				case '/':
					CLCD_voidSendString("/");
    278e:	88 e6       	ldi	r24, 0x68	; 104
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
    2796:	19 c0       	rjmp	.+50     	; 0x27ca <main+0x5c2>
					break;
				default:
					CLCD_voidSendString("ERROR");
    2798:	8a e6       	ldi	r24, 0x6A	; 106
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
    27a0:	14 c0       	rjmp	.+40     	; 0x27ca <main+0x5c2>
					break;
				}
		//getting operand 2
		//waiting for the user to enter value
		while(Copy_u8InputFromKPD2==0xff)		Copy_u8InputFromKPD2=KPD_u8GetKeyState();
    27a2:	0e 94 0d 10 	call	0x201a	; 0x201a <KPD_u8GetKeyState>
    27a6:	8e 01       	movw	r16, r28
    27a8:	02 5c       	subi	r16, 0xC2	; 194
    27aa:	1f 4f       	sbci	r17, 0xFF	; 255
    27ac:	88 2f       	mov	r24, r24
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	a0 e0       	ldi	r26, 0x00	; 0
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	f8 01       	movw	r30, r16
    27c2:	80 83       	st	Z, r24
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	a2 83       	std	Z+2, r26	; 0x02
    27c8:	b3 83       	std	Z+3, r27	; 0x03
    27ca:	fe 01       	movw	r30, r28
    27cc:	fe 96       	adiw	r30, 0x3e	; 62
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	53 e4       	ldi	r21, 0x43	; 67
    27de:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    27e2:	88 23       	and	r24, r24
    27e4:	f1 f2       	breq	.-68     	; 0x27a2 <main+0x59a>
    27e6:	e1 c0       	rjmp	.+450    	; 0x29aa <main+0x7a2>
		//saving the user value in op2
		while(Copy_u8InputFromKPD2 != '+' && Copy_u8InputFromKPD2 != '-' && Copy_u8InputFromKPD2 != '*' && Copy_u8InputFromKPD2 != '=' && Copy_u8InputFromKPD2 != '/' && Copy_u8InputFromKPD2 != 0xff  )
		{
			if(Copy_u8InputFromKPD2=='.'){
    27e8:	fe 01       	movw	r30, r28
    27ea:	fe 96       	adiw	r30, 0x3e	; 62
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	48 e3       	ldi	r20, 0x38	; 56
    27fa:	52 e4       	ldi	r21, 0x42	; 66
    27fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2800:	88 23       	and	r24, r24
    2802:	e1 f5       	brne	.+120    	; 0x287c <main+0x674>
				CLCD_voidSendString(".");
    2804:	80 e6       	ldi	r24, 0x60	; 96
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
				floatflag2_u8=1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	8c ab       	std	Y+52, r24	; 0x34
				Fac2_f32=0.1;
    2810:	8d ec       	ldi	r24, 0xCD	; 205
    2812:	9c ec       	ldi	r25, 0xCC	; 204
    2814:	ac ec       	ldi	r26, 0xCC	; 204
    2816:	bd e3       	ldi	r27, 0x3D	; 61
    2818:	8b a7       	std	Y+43, r24	; 0x2b
    281a:	9c a7       	std	Y+44, r25	; 0x2c
    281c:	ad a7       	std	Y+45, r26	; 0x2d
    281e:	be a7       	std	Y+46, r27	; 0x2e
				Copy_u8InputFromKPD2=0xff;
    2820:	fe 01       	movw	r30, r28
    2822:	fe 96       	adiw	r30, 0x3e	; 62
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	af e7       	ldi	r26, 0x7F	; 127
    282a:	b3 e4       	ldi	r27, 0x43	; 67
    282c:	80 83       	st	Z, r24
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	a2 83       	std	Z+2, r26	; 0x02
    2832:	b3 83       	std	Z+3, r27	; 0x03
    2834:	14 c0       	rjmp	.+40     	; 0x285e <main+0x656>
				//waiting for the user to enter value
				while(Copy_u8InputFromKPD2==0xff)		Copy_u8InputFromKPD2=KPD_u8GetKeyState();
    2836:	0e 94 0d 10 	call	0x201a	; 0x201a <KPD_u8GetKeyState>
    283a:	8e 01       	movw	r16, r28
    283c:	02 5c       	subi	r16, 0xC2	; 194
    283e:	1f 4f       	sbci	r17, 0xFF	; 255
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 e0       	ldi	r26, 0x00	; 0
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	f8 01       	movw	r30, r16
    2856:	80 83       	st	Z, r24
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	a2 83       	std	Z+2, r26	; 0x02
    285c:	b3 83       	std	Z+3, r27	; 0x03
    285e:	fe 01       	movw	r30, r28
    2860:	fe 96       	adiw	r30, 0x3e	; 62
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	53 e4       	ldi	r21, 0x43	; 67
    2872:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2876:	88 23       	and	r24, r24
    2878:	f1 f2       	breq	.-68     	; 0x2836 <main+0x62e>
    287a:	97 c0       	rjmp	.+302    	; 0x29aa <main+0x7a2>
				continue;
			}
			CLCD_voidSendNum(Copy_u8InputFromKPD2);
    287c:	fe 01       	movw	r30, r28
    287e:	fe 96       	adiw	r30, 0x3e	; 62
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	0e 94 9e 0b 	call	0x173c	; 0x173c <CLCD_voidSendNum>
			if(floatflag2_u8){
    2894:	8c a9       	ldd	r24, Y+52	; 0x34
    2896:	88 23       	and	r24, r24
    2898:	c9 f1       	breq	.+114    	; 0x290c <main+0x704>
				Copy_u8InputFromKPD2 *= Fac2_f32;
    289a:	8e 01       	movw	r16, r28
    289c:	02 5c       	subi	r16, 0xC2	; 194
    289e:	1f 4f       	sbci	r17, 0xFF	; 255
    28a0:	fe 01       	movw	r30, r28
    28a2:	fe 96       	adiw	r30, 0x3e	; 62
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	2b a5       	ldd	r18, Y+43	; 0x2b
    28ae:	3c a5       	ldd	r19, Y+44	; 0x2c
    28b0:	4d a5       	ldd	r20, Y+45	; 0x2d
    28b2:	5e a5       	ldd	r21, Y+46	; 0x2e
    28b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	f8 01       	movw	r30, r16
    28be:	80 83       	st	Z, r24
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	a2 83       	std	Z+2, r26	; 0x02
    28c4:	b3 83       	std	Z+3, r27	; 0x03
				OP2_f32 += Copy_u8InputFromKPD2;
    28c6:	fe 01       	movw	r30, r28
    28c8:	fe 96       	adiw	r30, 0x3e	; 62
    28ca:	6e a9       	ldd	r22, Y+54	; 0x36
    28cc:	7f a9       	ldd	r23, Y+55	; 0x37
    28ce:	88 ad       	ldd	r24, Y+56	; 0x38
    28d0:	99 ad       	ldd	r25, Y+57	; 0x39
    28d2:	20 81       	ld	r18, Z
    28d4:	31 81       	ldd	r19, Z+1	; 0x01
    28d6:	42 81       	ldd	r20, Z+2	; 0x02
    28d8:	53 81       	ldd	r21, Z+3	; 0x03
    28da:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8e ab       	std	Y+54, r24	; 0x36
    28e4:	9f ab       	std	Y+55, r25	; 0x37
    28e6:	a8 af       	std	Y+56, r26	; 0x38
    28e8:	b9 af       	std	Y+57, r27	; 0x39
				Fac2_f32 *= 0.1;
    28ea:	6b a5       	ldd	r22, Y+43	; 0x2b
    28ec:	7c a5       	ldd	r23, Y+44	; 0x2c
    28ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    28f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    28f2:	2d ec       	ldi	r18, 0xCD	; 205
    28f4:	3c ec       	ldi	r19, 0xCC	; 204
    28f6:	4c ec       	ldi	r20, 0xCC	; 204
    28f8:	5d e3       	ldi	r21, 0x3D	; 61
    28fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8b a7       	std	Y+43, r24	; 0x2b
    2904:	9c a7       	std	Y+44, r25	; 0x2c
    2906:	ad a7       	std	Y+45, r26	; 0x2d
    2908:	be a7       	std	Y+46, r27	; 0x2e
    290a:	22 c0       	rjmp	.+68     	; 0x2950 <main+0x748>
			}
			else{
				OP2_f32 *= Fac2_f32;
    290c:	6e a9       	ldd	r22, Y+54	; 0x36
    290e:	7f a9       	ldd	r23, Y+55	; 0x37
    2910:	88 ad       	ldd	r24, Y+56	; 0x38
    2912:	99 ad       	ldd	r25, Y+57	; 0x39
    2914:	2b a5       	ldd	r18, Y+43	; 0x2b
    2916:	3c a5       	ldd	r19, Y+44	; 0x2c
    2918:	4d a5       	ldd	r20, Y+45	; 0x2d
    291a:	5e a5       	ldd	r21, Y+46	; 0x2e
    291c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8e ab       	std	Y+54, r24	; 0x36
    2926:	9f ab       	std	Y+55, r25	; 0x37
    2928:	a8 af       	std	Y+56, r26	; 0x38
    292a:	b9 af       	std	Y+57, r27	; 0x39
				OP2_f32 += Copy_u8InputFromKPD2;
    292c:	fe 01       	movw	r30, r28
    292e:	fe 96       	adiw	r30, 0x3e	; 62
    2930:	6e a9       	ldd	r22, Y+54	; 0x36
    2932:	7f a9       	ldd	r23, Y+55	; 0x37
    2934:	88 ad       	ldd	r24, Y+56	; 0x38
    2936:	99 ad       	ldd	r25, Y+57	; 0x39
    2938:	20 81       	ld	r18, Z
    293a:	31 81       	ldd	r19, Z+1	; 0x01
    293c:	42 81       	ldd	r20, Z+2	; 0x02
    293e:	53 81       	ldd	r21, Z+3	; 0x03
    2940:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8e ab       	std	Y+54, r24	; 0x36
    294a:	9f ab       	std	Y+55, r25	; 0x37
    294c:	a8 af       	std	Y+56, r26	; 0x38
    294e:	b9 af       	std	Y+57, r27	; 0x39
			}
			Copy_u8InputFromKPD2=0xff;
    2950:	fe 01       	movw	r30, r28
    2952:	fe 96       	adiw	r30, 0x3e	; 62
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	af e7       	ldi	r26, 0x7F	; 127
    295a:	b3 e4       	ldi	r27, 0x43	; 67
    295c:	80 83       	st	Z, r24
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	a2 83       	std	Z+2, r26	; 0x02
    2962:	b3 83       	std	Z+3, r27	; 0x03
    2964:	14 c0       	rjmp	.+40     	; 0x298e <main+0x786>
			//waiting for the user to enter value
			while(Copy_u8InputFromKPD2==0xff)		Copy_u8InputFromKPD2=KPD_u8GetKeyState();
    2966:	0e 94 0d 10 	call	0x201a	; 0x201a <KPD_u8GetKeyState>
    296a:	8e 01       	movw	r16, r28
    296c:	02 5c       	subi	r16, 0xC2	; 194
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	f8 01       	movw	r30, r16
    2986:	80 83       	st	Z, r24
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	a2 83       	std	Z+2, r26	; 0x02
    298c:	b3 83       	std	Z+3, r27	; 0x03
    298e:	fe 01       	movw	r30, r28
    2990:	fe 96       	adiw	r30, 0x3e	; 62
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	53 e4       	ldi	r21, 0x43	; 67
    29a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	f1 f2       	breq	.-68     	; 0x2966 <main+0x75e>
				}
		//getting operand 2
		//waiting for the user to enter value
		while(Copy_u8InputFromKPD2==0xff)		Copy_u8InputFromKPD2=KPD_u8GetKeyState();
		//saving the user value in op2
		while(Copy_u8InputFromKPD2 != '+' && Copy_u8InputFromKPD2 != '-' && Copy_u8InputFromKPD2 != '*' && Copy_u8InputFromKPD2 != '=' && Copy_u8InputFromKPD2 != '/' && Copy_u8InputFromKPD2 != 0xff  )
    29aa:	2e 96       	adiw	r28, 0x0e	; 14
    29ac:	1f ae       	std	Y+63, r1	; 0x3f
    29ae:	2e 97       	sbiw	r28, 0x0e	; 14
    29b0:	fe 01       	movw	r30, r28
    29b2:	fe 96       	adiw	r30, 0x3e	; 62
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	4c e2       	ldi	r20, 0x2C	; 44
    29c2:	52 e4       	ldi	r21, 0x42	; 66
    29c4:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    29c8:	88 23       	and	r24, r24
    29ca:	21 f0       	breq	.+8      	; 0x29d4 <main+0x7cc>
    29cc:	f1 e0       	ldi	r31, 0x01	; 1
    29ce:	2e 96       	adiw	r28, 0x0e	; 14
    29d0:	ff af       	std	Y+63, r31	; 0x3f
    29d2:	2e 97       	sbiw	r28, 0x0e	; 14
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	2e 96       	adiw	r28, 0x0e	; 14
    29d8:	2f ad       	ldd	r18, Y+63	; 0x3f
    29da:	2e 97       	sbiw	r28, 0x0e	; 14
    29dc:	82 27       	eor	r24, r18
    29de:	88 23       	and	r24, r24
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <main+0x7dc>
    29e2:	81 c0       	rjmp	.+258    	; 0x2ae6 <main+0x8de>
    29e4:	2d 96       	adiw	r28, 0x0d	; 13
    29e6:	1f ae       	std	Y+63, r1	; 0x3f
    29e8:	2d 97       	sbiw	r28, 0x0d	; 13
    29ea:	fe 01       	movw	r30, r28
    29ec:	fe 96       	adiw	r30, 0x3e	; 62
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	44 e3       	ldi	r20, 0x34	; 52
    29fc:	52 e4       	ldi	r21, 0x42	; 66
    29fe:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2a02:	88 23       	and	r24, r24
    2a04:	21 f0       	breq	.+8      	; 0x2a0e <main+0x806>
    2a06:	31 e0       	ldi	r19, 0x01	; 1
    2a08:	2d 96       	adiw	r28, 0x0d	; 13
    2a0a:	3f af       	std	Y+63, r19	; 0x3f
    2a0c:	2d 97       	sbiw	r28, 0x0d	; 13
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	2d 96       	adiw	r28, 0x0d	; 13
    2a12:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a14:	2d 97       	sbiw	r28, 0x0d	; 13
    2a16:	89 27       	eor	r24, r25
    2a18:	88 23       	and	r24, r24
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <main+0x816>
    2a1c:	64 c0       	rjmp	.+200    	; 0x2ae6 <main+0x8de>
    2a1e:	2c 96       	adiw	r28, 0x0c	; 12
    2a20:	1f ae       	std	Y+63, r1	; 0x3f
    2a22:	2c 97       	sbiw	r28, 0x0c	; 12
    2a24:	fe 01       	movw	r30, r28
    2a26:	fe 96       	adiw	r30, 0x3e	; 62
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	48 e2       	ldi	r20, 0x28	; 40
    2a36:	52 e4       	ldi	r21, 0x42	; 66
    2a38:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2a3c:	88 23       	and	r24, r24
    2a3e:	21 f0       	breq	.+8      	; 0x2a48 <main+0x840>
    2a40:	e1 e0       	ldi	r30, 0x01	; 1
    2a42:	2c 96       	adiw	r28, 0x0c	; 12
    2a44:	ef af       	std	Y+63, r30	; 0x3f
    2a46:	2c 97       	sbiw	r28, 0x0c	; 12
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	2c 96       	adiw	r28, 0x0c	; 12
    2a4c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a4e:	2c 97       	sbiw	r28, 0x0c	; 12
    2a50:	8f 27       	eor	r24, r31
    2a52:	88 23       	and	r24, r24
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <main+0x850>
    2a56:	47 c0       	rjmp	.+142    	; 0x2ae6 <main+0x8de>
    2a58:	2b 96       	adiw	r28, 0x0b	; 11
    2a5a:	1f ae       	std	Y+63, r1	; 0x3f
    2a5c:	2b 97       	sbiw	r28, 0x0b	; 11
    2a5e:	fe 01       	movw	r30, r28
    2a60:	fe 96       	adiw	r30, 0x3e	; 62
    2a62:	60 81       	ld	r22, Z
    2a64:	71 81       	ldd	r23, Z+1	; 0x01
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	93 81       	ldd	r25, Z+3	; 0x03
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	44 e7       	ldi	r20, 0x74	; 116
    2a70:	52 e4       	ldi	r21, 0x42	; 66
    2a72:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2a76:	88 23       	and	r24, r24
    2a78:	21 f0       	breq	.+8      	; 0x2a82 <main+0x87a>
    2a7a:	21 e0       	ldi	r18, 0x01	; 1
    2a7c:	2b 96       	adiw	r28, 0x0b	; 11
    2a7e:	2f af       	std	Y+63, r18	; 0x3f
    2a80:	2b 97       	sbiw	r28, 0x0b	; 11
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	2b 96       	adiw	r28, 0x0b	; 11
    2a86:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a88:	2b 97       	sbiw	r28, 0x0b	; 11
    2a8a:	83 27       	eor	r24, r19
    2a8c:	88 23       	and	r24, r24
    2a8e:	59 f5       	brne	.+86     	; 0x2ae6 <main+0x8de>
    2a90:	2a 96       	adiw	r28, 0x0a	; 10
    2a92:	1f ae       	std	Y+63, r1	; 0x3f
    2a94:	2a 97       	sbiw	r28, 0x0a	; 10
    2a96:	fe 01       	movw	r30, r28
    2a98:	fe 96       	adiw	r30, 0x3e	; 62
    2a9a:	60 81       	ld	r22, Z
    2a9c:	71 81       	ldd	r23, Z+1	; 0x01
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	4c e3       	ldi	r20, 0x3C	; 60
    2aa8:	52 e4       	ldi	r21, 0x42	; 66
    2aaa:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	21 f0       	breq	.+8      	; 0x2aba <main+0x8b2>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	2a 96       	adiw	r28, 0x0a	; 10
    2ab6:	8f af       	std	Y+63, r24	; 0x3f
    2ab8:	2a 97       	sbiw	r28, 0x0a	; 10
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	2a 96       	adiw	r28, 0x0a	; 10
    2abe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ac0:	2a 97       	sbiw	r28, 0x0a	; 10
    2ac2:	89 27       	eor	r24, r25
    2ac4:	88 23       	and	r24, r24
    2ac6:	79 f4       	brne	.+30     	; 0x2ae6 <main+0x8de>
    2ac8:	fe 01       	movw	r30, r28
    2aca:	fe 96       	adiw	r30, 0x3e	; 62
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	53 e4       	ldi	r21, 0x43	; 67
    2adc:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2ae0:	88 23       	and	r24, r24
    2ae2:	09 f0       	breq	.+2      	; 0x2ae6 <main+0x8de>
    2ae4:	81 ce       	rjmp	.-766    	; 0x27e8 <main+0x5e0>
			Copy_u8InputFromKPD2=0xff;
			//waiting for the user to enter value
			while(Copy_u8InputFromKPD2==0xff)		Copy_u8InputFromKPD2=KPD_u8GetKeyState();
		}

		switch (operation_u8)
    2ae6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae8:	e8 2f       	mov	r30, r24
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	29 96       	adiw	r28, 0x09	; 9
    2aee:	ff af       	std	Y+63, r31	; 0x3f
    2af0:	ee af       	std	Y+62, r30	; 0x3e
    2af2:	29 97       	sbiw	r28, 0x09	; 9
    2af4:	29 96       	adiw	r28, 0x09	; 9
    2af6:	2e ad       	ldd	r18, Y+62	; 0x3e
    2af8:	3f ad       	ldd	r19, Y+63	; 0x3f
    2afa:	29 97       	sbiw	r28, 0x09	; 9
    2afc:	2b 32       	cpi	r18, 0x2B	; 43
    2afe:	31 05       	cpc	r19, r1
    2b00:	f1 f0       	breq	.+60     	; 0x2b3e <main+0x936>
    2b02:	29 96       	adiw	r28, 0x09	; 9
    2b04:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b06:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b08:	29 97       	sbiw	r28, 0x09	; 9
    2b0a:	8c 32       	cpi	r24, 0x2C	; 44
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	44 f4       	brge	.+16     	; 0x2b20 <main+0x918>
    2b10:	29 96       	adiw	r28, 0x09	; 9
    2b12:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b14:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b16:	29 97       	sbiw	r28, 0x09	; 9
    2b18:	ea 32       	cpi	r30, 0x2A	; 42
    2b1a:	f1 05       	cpc	r31, r1
    2b1c:	91 f1       	breq	.+100    	; 0x2b82 <main+0x97a>
    2b1e:	53 c0       	rjmp	.+166    	; 0x2bc6 <main+0x9be>
    2b20:	29 96       	adiw	r28, 0x09	; 9
    2b22:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b24:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b26:	29 97       	sbiw	r28, 0x09	; 9
    2b28:	2d 32       	cpi	r18, 0x2D	; 45
    2b2a:	31 05       	cpc	r19, r1
    2b2c:	c9 f0       	breq	.+50     	; 0x2b60 <main+0x958>
    2b2e:	29 96       	adiw	r28, 0x09	; 9
    2b30:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b32:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b34:	29 97       	sbiw	r28, 0x09	; 9
    2b36:	8f 32       	cpi	r24, 0x2F	; 47
    2b38:	91 05       	cpc	r25, r1
    2b3a:	a1 f1       	breq	.+104    	; 0x2ba4 <main+0x99c>
    2b3c:	44 c0       	rjmp	.+136    	; 0x2bc6 <main+0x9be>
		{
		case '+':
			result_f64=OP1_f32+OP2_f32;
    2b3e:	6a ad       	ldd	r22, Y+58	; 0x3a
    2b40:	7b ad       	ldd	r23, Y+59	; 0x3b
    2b42:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b44:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b46:	2e a9       	ldd	r18, Y+54	; 0x36
    2b48:	3f a9       	ldd	r19, Y+55	; 0x37
    2b4a:	48 ad       	ldd	r20, Y+56	; 0x38
    2b4c:	59 ad       	ldd	r21, Y+57	; 0x39
    2b4e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	8f a3       	std	Y+39, r24	; 0x27
    2b58:	98 a7       	std	Y+40, r25	; 0x28
    2b5a:	a9 a7       	std	Y+41, r26	; 0x29
    2b5c:	ba a7       	std	Y+42, r27	; 0x2a
    2b5e:	37 c0       	rjmp	.+110    	; 0x2bce <main+0x9c6>
			break;
		case '-':
			result_f64=OP1_f32-OP2_f32;
    2b60:	6a ad       	ldd	r22, Y+58	; 0x3a
    2b62:	7b ad       	ldd	r23, Y+59	; 0x3b
    2b64:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b66:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b68:	2e a9       	ldd	r18, Y+54	; 0x36
    2b6a:	3f a9       	ldd	r19, Y+55	; 0x37
    2b6c:	48 ad       	ldd	r20, Y+56	; 0x38
    2b6e:	59 ad       	ldd	r21, Y+57	; 0x39
    2b70:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8f a3       	std	Y+39, r24	; 0x27
    2b7a:	98 a7       	std	Y+40, r25	; 0x28
    2b7c:	a9 a7       	std	Y+41, r26	; 0x29
    2b7e:	ba a7       	std	Y+42, r27	; 0x2a
    2b80:	26 c0       	rjmp	.+76     	; 0x2bce <main+0x9c6>
			break;
		case '*':
			result_f64=OP1_f32*OP2_f32;
    2b82:	6a ad       	ldd	r22, Y+58	; 0x3a
    2b84:	7b ad       	ldd	r23, Y+59	; 0x3b
    2b86:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b88:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b8a:	2e a9       	ldd	r18, Y+54	; 0x36
    2b8c:	3f a9       	ldd	r19, Y+55	; 0x37
    2b8e:	48 ad       	ldd	r20, Y+56	; 0x38
    2b90:	59 ad       	ldd	r21, Y+57	; 0x39
    2b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	8f a3       	std	Y+39, r24	; 0x27
    2b9c:	98 a7       	std	Y+40, r25	; 0x28
    2b9e:	a9 a7       	std	Y+41, r26	; 0x29
    2ba0:	ba a7       	std	Y+42, r27	; 0x2a
    2ba2:	15 c0       	rjmp	.+42     	; 0x2bce <main+0x9c6>
			break;
		case '/':
			result_f64=OP1_f32/OP2_f32;
    2ba4:	6a ad       	ldd	r22, Y+58	; 0x3a
    2ba6:	7b ad       	ldd	r23, Y+59	; 0x3b
    2ba8:	8c ad       	ldd	r24, Y+60	; 0x3c
    2baa:	9d ad       	ldd	r25, Y+61	; 0x3d
    2bac:	2e a9       	ldd	r18, Y+54	; 0x36
    2bae:	3f a9       	ldd	r19, Y+55	; 0x37
    2bb0:	48 ad       	ldd	r20, Y+56	; 0x38
    2bb2:	59 ad       	ldd	r21, Y+57	; 0x39
    2bb4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	8f a3       	std	Y+39, r24	; 0x27
    2bbe:	98 a7       	std	Y+40, r25	; 0x28
    2bc0:	a9 a7       	std	Y+41, r26	; 0x29
    2bc2:	ba a7       	std	Y+42, r27	; 0x2a
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <main+0x9c6>
			break;
		default:
			CLCD_voidSendString("ERROR");
    2bc6:	8a e6       	ldi	r24, 0x6A	; 106
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
			break;
		}
		CLCD_voidSendString("=");
    2bce:	80 e7       	ldi	r24, 0x70	; 112
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
		CLCD_voidSetPosition(0,1);
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	0e 94 29 0b 	call	0x1652	; 0x1652 <CLCD_voidSetPosition>
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	a0 e8       	ldi	r26, 0x80	; 128
    2be4:	bf e3       	ldi	r27, 0x3F	; 63
    2be6:	8b 87       	std	Y+11, r24	; 0x0b
    2be8:	9c 87       	std	Y+12, r25	; 0x0c
    2bea:	ad 87       	std	Y+13, r26	; 0x0d
    2bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	4a ef       	ldi	r20, 0xFA	; 250
    2bfc:	54 e4       	ldi	r21, 0x44	; 68
    2bfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	8f 83       	std	Y+7, r24	; 0x07
    2c08:	98 87       	std	Y+8, r25	; 0x08
    2c0a:	a9 87       	std	Y+9, r26	; 0x09
    2c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c10:	78 85       	ldd	r23, Y+8	; 0x08
    2c12:	89 85       	ldd	r24, Y+9	; 0x09
    2c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e8       	ldi	r20, 0x80	; 128
    2c1c:	5f e3       	ldi	r21, 0x3F	; 63
    2c1e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    2c22:	88 23       	and	r24, r24
    2c24:	2c f4       	brge	.+10     	; 0x2c30 <main+0xa28>
		__ticks = 1;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
    2c2e:	3f c0       	rjmp	.+126    	; 0x2cae <main+0xaa6>
	else if (__tmp > 65535)
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	3f ef       	ldi	r19, 0xFF	; 255
    2c3c:	4f e7       	ldi	r20, 0x7F	; 127
    2c3e:	57 e4       	ldi	r21, 0x47	; 71
    2c40:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2c44:	18 16       	cp	r1, r24
    2c46:	4c f5       	brge	.+82     	; 0x2c9a <main+0xa92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e2       	ldi	r20, 0x20	; 32
    2c56:	51 e4       	ldi	r21, 0x41	; 65
    2c58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	0f c0       	rjmp	.+30     	; 0x2c90 <main+0xa88>
    2c72:	88 ec       	ldi	r24, 0xC8	; 200
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <main+0xa76>
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	69 f7       	brne	.-38     	; 0x2c72 <main+0xa6a>
    2c98:	14 c0       	rjmp	.+40     	; 0x2cc2 <main+0xaba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <main+0xab2>
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		f64 temp_f64 = result_f64;
    2cc2:	8f a1       	ldd	r24, Y+39	; 0x27
    2cc4:	98 a5       	ldd	r25, Y+40	; 0x28
    2cc6:	a9 a5       	ldd	r26, Y+41	; 0x29
    2cc8:	ba a5       	ldd	r27, Y+42	; 0x2a
    2cca:	8b a3       	std	Y+35, r24	; 0x23
    2ccc:	9c a3       	std	Y+36, r25	; 0x24
    2cce:	ad a3       	std	Y+37, r26	; 0x25
    2cd0:	be a3       	std	Y+38, r27	; 0x26
		u8 counter=0;
    2cd2:	1a a2       	std	Y+34, r1	; 0x22
		u32 int_part_u32 = (u32)temp_f64;
    2cd4:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd6:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cda:	9e a1       	ldd	r25, Y+38	; 0x26
    2cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ce6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ce8:	a8 a3       	std	Y+32, r26	; 0x20
    2cea:	b9 a3       	std	Y+33, r27	; 0x21
		CLCD_voidSendNum(int_part_u32);
    2cec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cf0:	0e 94 9e 0b 	call	0x173c	; 0x173c <CLCD_voidSendNum>
		temp_f64 -= int_part_u32;
    2cf4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2cf6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2cf8:	88 a1       	ldd	r24, Y+32	; 0x20
    2cfa:	99 a1       	ldd	r25, Y+33	; 0x21
    2cfc:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    2d00:	9b 01       	movw	r18, r22
    2d02:	ac 01       	movw	r20, r24
    2d04:	6b a1       	ldd	r22, Y+35	; 0x23
    2d06:	7c a1       	ldd	r23, Y+36	; 0x24
    2d08:	8d a1       	ldd	r24, Y+37	; 0x25
    2d0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d0c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	8b a3       	std	Y+35, r24	; 0x23
    2d16:	9c a3       	std	Y+36, r25	; 0x24
    2d18:	ad a3       	std	Y+37, r26	; 0x25
    2d1a:	be a3       	std	Y+38, r27	; 0x26
		if(temp_f64 > 0) {
    2d1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d20:	8d a1       	ldd	r24, Y+37	; 0x25
    2d22:	9e a1       	ldd	r25, Y+38	; 0x26
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	0c f0       	brlt	.+2      	; 0x2d36 <main+0xb2e>
    2d34:	7c ca       	rjmp	.-2824   	; 0x222e <main+0x26>
			CLCD_voidSendString(".");
    2d36:	80 e6       	ldi	r24, 0x60	; 96
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 00 0b 	call	0x1600	; 0x1600 <CLCD_voidSendString>
    2d3e:	3a c0       	rjmp	.+116    	; 0x2db4 <main+0xbac>
			while(temp_f64 > 0 && counter<4) {
				temp_f64 *= 10;
    2d40:	6b a1       	ldd	r22, Y+35	; 0x23
    2d42:	7c a1       	ldd	r23, Y+36	; 0x24
    2d44:	8d a1       	ldd	r24, Y+37	; 0x25
    2d46:	9e a1       	ldd	r25, Y+38	; 0x26
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e2       	ldi	r20, 0x20	; 32
    2d4e:	51 e4       	ldi	r21, 0x41	; 65
    2d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8b a3       	std	Y+35, r24	; 0x23
    2d5a:	9c a3       	std	Y+36, r25	; 0x24
    2d5c:	ad a3       	std	Y+37, r26	; 0x25
    2d5e:	be a3       	std	Y+38, r27	; 0x26
				u8 temp_u8 = (u8)temp_f64;
    2d60:	6b a1       	ldd	r22, Y+35	; 0x23
    2d62:	7c a1       	ldd	r23, Y+36	; 0x24
    2d64:	8d a1       	ldd	r24, Y+37	; 0x25
    2d66:	9e a1       	ldd	r25, Y+38	; 0x26
    2d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8d 8f       	std	Y+29, r24	; 0x1d
				temp_f64 -= temp_u8;
    2d72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d74:	88 2f       	mov	r24, r24
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	aa 27       	eor	r26, r26
    2d7a:	97 fd       	sbrc	r25, 7
    2d7c:	a0 95       	com	r26
    2d7e:	ba 2f       	mov	r27, r26
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    2d88:	9b 01       	movw	r18, r22
    2d8a:	ac 01       	movw	r20, r24
    2d8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d90:	8d a1       	ldd	r24, Y+37	; 0x25
    2d92:	9e a1       	ldd	r25, Y+38	; 0x26
    2d94:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	8b a3       	std	Y+35, r24	; 0x23
    2d9e:	9c a3       	std	Y+36, r25	; 0x24
    2da0:	ad a3       	std	Y+37, r26	; 0x25
    2da2:	be a3       	std	Y+38, r27	; 0x26
				CLCD_voidSendNum(temp_u8);
    2da4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	0e 94 9e 0b 	call	0x173c	; 0x173c <CLCD_voidSendNum>
				counter++;
    2dae:	8a a1       	ldd	r24, Y+34	; 0x22
    2db0:	8f 5f       	subi	r24, 0xFF	; 255
    2db2:	8a a3       	std	Y+34, r24	; 0x22
		u32 int_part_u32 = (u32)temp_f64;
		CLCD_voidSendNum(int_part_u32);
		temp_f64 -= int_part_u32;
		if(temp_f64 > 0) {
			CLCD_voidSendString(".");
			while(temp_f64 > 0 && counter<4) {
    2db4:	27 96       	adiw	r28, 0x07	; 7
    2db6:	1f ae       	std	Y+63, r1	; 0x3f
    2db8:	27 97       	sbiw	r28, 0x07	; 7
    2dba:	6b a1       	ldd	r22, Y+35	; 0x23
    2dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	24 f4       	brge	.+8      	; 0x2dda <main+0xbd2>
    2dd2:	91 e0       	ldi	r25, 0x01	; 1
    2dd4:	27 96       	adiw	r28, 0x07	; 7
    2dd6:	9f af       	std	Y+63, r25	; 0x3f
    2dd8:	27 97       	sbiw	r28, 0x07	; 7
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	27 96       	adiw	r28, 0x07	; 7
    2dde:	ef ad       	ldd	r30, Y+63	; 0x3f
    2de0:	27 97       	sbiw	r28, 0x07	; 7
    2de2:	8e 27       	eor	r24, r30
    2de4:	88 23       	and	r24, r24
    2de6:	09 f0       	breq	.+2      	; 0x2dea <main+0xbe2>
    2de8:	22 ca       	rjmp	.-3004   	; 0x222e <main+0x26>
    2dea:	8a a1       	ldd	r24, Y+34	; 0x22
    2dec:	84 30       	cpi	r24, 0x04	; 4
    2dee:	08 f4       	brcc	.+2      	; 0x2df2 <main+0xbea>
    2df0:	a7 cf       	rjmp	.-178    	; 0x2d40 <main+0xb38>
    2df2:	1d ca       	rjmp	.-3014   	; 0x222e <main+0x26>

00002df4 <__udivmodhi4>:
    2df4:	aa 1b       	sub	r26, r26
    2df6:	bb 1b       	sub	r27, r27
    2df8:	51 e1       	ldi	r21, 0x11	; 17
    2dfa:	07 c0       	rjmp	.+14     	; 0x2e0a <__udivmodhi4_ep>

00002dfc <__udivmodhi4_loop>:
    2dfc:	aa 1f       	adc	r26, r26
    2dfe:	bb 1f       	adc	r27, r27
    2e00:	a6 17       	cp	r26, r22
    2e02:	b7 07       	cpc	r27, r23
    2e04:	10 f0       	brcs	.+4      	; 0x2e0a <__udivmodhi4_ep>
    2e06:	a6 1b       	sub	r26, r22
    2e08:	b7 0b       	sbc	r27, r23

00002e0a <__udivmodhi4_ep>:
    2e0a:	88 1f       	adc	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	5a 95       	dec	r21
    2e10:	a9 f7       	brne	.-22     	; 0x2dfc <__udivmodhi4_loop>
    2e12:	80 95       	com	r24
    2e14:	90 95       	com	r25
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	08 95       	ret

00002e1c <__prologue_saves__>:
    2e1c:	2f 92       	push	r2
    2e1e:	3f 92       	push	r3
    2e20:	4f 92       	push	r4
    2e22:	5f 92       	push	r5
    2e24:	6f 92       	push	r6
    2e26:	7f 92       	push	r7
    2e28:	8f 92       	push	r8
    2e2a:	9f 92       	push	r9
    2e2c:	af 92       	push	r10
    2e2e:	bf 92       	push	r11
    2e30:	cf 92       	push	r12
    2e32:	df 92       	push	r13
    2e34:	ef 92       	push	r14
    2e36:	ff 92       	push	r15
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	ca 1b       	sub	r28, r26
    2e46:	db 0b       	sbc	r29, r27
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	09 94       	ijmp

00002e54 <__epilogue_restores__>:
    2e54:	2a 88       	ldd	r2, Y+18	; 0x12
    2e56:	39 88       	ldd	r3, Y+17	; 0x11
    2e58:	48 88       	ldd	r4, Y+16	; 0x10
    2e5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e66:	b9 84       	ldd	r11, Y+9	; 0x09
    2e68:	c8 84       	ldd	r12, Y+8	; 0x08
    2e6a:	df 80       	ldd	r13, Y+7	; 0x07
    2e6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e70:	0c 81       	ldd	r16, Y+4	; 0x04
    2e72:	1b 81       	ldd	r17, Y+3	; 0x03
    2e74:	aa 81       	ldd	r26, Y+2	; 0x02
    2e76:	b9 81       	ldd	r27, Y+1	; 0x01
    2e78:	ce 0f       	add	r28, r30
    2e7a:	d1 1d       	adc	r29, r1
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	ed 01       	movw	r28, r26
    2e88:	08 95       	ret

00002e8a <_exit>:
    2e8a:	f8 94       	cli

00002e8c <__stop_program>:
    2e8c:	ff cf       	rjmp	.-2      	; 0x2e8c <__stop_program>
